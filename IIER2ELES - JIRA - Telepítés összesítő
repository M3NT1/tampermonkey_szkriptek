// ==UserScript==
// @name         JIRA IIER2ELES Kitelepítés Összesítő - Naptár Nézet
// @namespace    http://tampermonkey.net/
// @version      3.0
// @description  Kigyűjti és megjeleníti a kitelepítési információkat az IIER2ELES JIRA kommentekből naptár nézetben
// @match        https://jira.ulyssys.hu/browse/IIER2ELES-*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const environmentOrder = [
        'TST',
        'ATD',
        'MVH TESZT',
        'MVH ELESTESZT',
        'MVHELES'
    ];

    // Környezetek és a hozzájuk tartozó komment minták
    const environmentPatterns = {
        'TST': 'Issue-hoz tartozó commit települt TST környezetre',
        'ATD': 'Issue-hoz tartozó commit települt ATD környezetre',
        'MVH TESZT': 'Issue-hoz tartozó commit települt MVHTESZT környezetre',
        'MVH ELESTESZT': 'Issue-hoz tartozó commit települt MVHELESTESZT környezetre',
        'MVHELES': 'Issue-hoz tartozó commit települt MVHELES környezetre'
    };

    // Környezetek színei
    const environmentColors = {
        'TST': '#4CAF50',
        'ATD': '#2196F3',
        'MVH TESZT': '#FF9800',
        'MVH ELESTESZT': '#9C27B0',
        'MVHELES': '#F44336'
    };

    // Dátum formázó függvények
    function formatDate(dateString) {
        const date = new Date(dateString);
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');

        return `${month}.${day} ${hours}:${minutes}`;
    }

    function formatShortDate(dateString) {
        const date = new Date(dateString);
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');

        return `${month}.${day} ${hours}:${minutes}`;
    }

    function formatFullDate(dateString) {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');

        return `${year}.${month}.${day} ${hours}:${minutes}`;
    }

    // Dátumok csoportosítása év és hónap szerint
    function groupDatesByYearMonth(dates, commentIds) {
        const grouped = {};

        dates.forEach((date, index) => {
            const dateObj = new Date(date);
            const year = dateObj.getFullYear();
            const month = dateObj.getMonth();
            const yearMonthKey = `${year}-${month}`;

            if (!grouped[yearMonthKey]) {
                grouped[yearMonthKey] = {
                    year: year,
                    month: month,
                    items: []
                };
            }

            grouped[yearMonthKey].items.push({
                date: date,
                commentId: commentIds[index]
            });
        });

        // Rendezzük a csoportokat év és hónap szerint csökkenő sorrendben
        const sortedKeys = Object.keys(grouped).sort((a, b) => {
            const [yearA, monthA] = a.split('-').map(Number);
            const [yearB, monthB] = b.split('-').map(Number);

            if (yearA !== yearB) {
                return yearB - yearA; // Csökkenő év szerinti rendezés
            }
            return monthB - monthA; // Csökkenő hónap szerinti rendezés
        });

        const result = {};
        sortedKeys.forEach(key => {
            result[key] = grouped[key];
        });

        return result;
    }

    function createDeploymentSection(deployments) {
        const newSection = document.createElement('div');
        newSection.id = 'deploymentModule';
        newSection.className = 'module toggle-wrap';

        // Fejléc hozzáadása
        const header = document.createElement('div');
        header.className = 'mod-header';
        header.innerHTML = '<h4 class="toggle-title">Kitelepítési Információk (Naptár Nézet)</h4>';
        newSection.appendChild(header);

        // Tartalom konténer létrehozása
        const content = document.createElement('div');
        content.className = 'mod-content';

        // Stílusok hozzáadása
        const style = document.createElement('style');
        style.textContent = `
            .deployment-table {
                width: 100%;
                border-collapse: collapse;
            }
            .deployment-table th {
                text-align: left;
                padding: 5px;
                border-bottom: 1px solid #ddd;
                background-color: #f5f5f5;
            }
            .deployment-table td {
                padding: 5px;
                border-bottom: 1px solid #eee;
                vertical-align: top;
            }
            .deployment-dates {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                margin-bottom: 10px;
            }
            .date-chip {
                background-color: #f0f0f0;
                border-radius: 12px;
                padding: 2px 8px;
                font-size: 12px;
                white-space: nowrap;
                cursor: pointer;
                transition: background-color 0.2s;
            }
            .date-chip:hover {
                background-color: #e0e0e0;
                text-decoration: underline;
            }
            .deployment-count {
                font-weight: bold;
                margin-left: 5px;
                color: #555;
            }
            .deployment-month {
                margin-top: 5px;
                margin-bottom: 3px;
                font-weight: bold;
                color: #555;
            }
            .calendar-button {
                background-color: #0052cc;
                color: white;
                border: none;
                border-radius: 3px;
                padding: 5px 10px;
                margin-top: 10px;
                cursor: pointer;
                font-size: 13px;
                transition: background-color 0.2s;
            }
            .calendar-button:hover {
                background-color: #0065ff;
            }
            .calendar-modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: auto;
                background-color: rgba(0,0,0,0.4);
            }
            .calendar-modal-content {
                background-color: #fefefe;
                margin: 5% auto;
                padding: 20px;
                border: 1px solid #ddd;
                border-radius: 5px;
                width: 90%;
                max-width: 1200px;
                max-height: 80vh;
                overflow-y: auto;
                display: flex;
                flex-direction: column;
            }
            .calendar-close {
                color: #aaa;
                float: right;
                font-size: 28px;
                font-weight: bold;
                cursor: pointer;
            }
            .calendar-close:hover {
                color: black;
            }
            .calendar-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 15px;
            }
            .calendar-title {
                margin: 0;
            }
            .calendar-legend {
                display: flex;
                flex-wrap: wrap;
                gap: 15px;
                margin-bottom: 15px;
            }
            .legend-item {
                display: flex;
                align-items: center;
            }
            .legend-color {
                width: 12px;
                height: 12px;
                border-radius: 50%;
                margin-right: 5px;
            }
            .calendar-container {
                display: flex;
                flex-direction: column;
                gap: 20px;
            }
            .month-calendar {
                border: 1px solid #ddd;
                border-radius: 5px;
                overflow: hidden;
                position: relative;
                z-index: 1;
            }
            .month-header {
                background-color: #f5f5f5;
                padding: 10px;
                text-align: center;
                font-weight: bold;
                border-bottom: 1px solid #ddd;
            }
            .calendar-grid {
                display: grid;
                grid-template-columns: repeat(7, 1fr);
                background-color: #fff;
            }
            .calendar-day-header {
                padding: 5px;
                text-align: center;
                font-weight: bold;
                border-bottom: 1px solid #eee;
                background-color: #f9f9f9;
            }
            .calendar-day {
                min-height: 80px;
                padding: 5px;
                border: 1px solid #eee;
                position: relative;
            }
            .calendar-day:hover {
                position: relative;
                z-index: 101;
            }
            .calendar-day.empty {
                background-color: #f9f9f9;
            }
            .calendar-day-number {
                position: absolute;
                top: 5px;
                right: 5px;
                font-size: 12px;
                color: #777;
            }
            .calendar-day-events {
                margin-top: 20px;
                display: flex;
                flex-direction: column;
                gap: 3px;
            }
            .calendar-event {
                display: flex;
                align-items: center;
                font-size: 11px;
                padding: 2px 4px;
                border-radius: 3px;
                cursor: pointer;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                max-width: 100%;
            }
            .calendar-event:hover {
                filter: brightness(0.9);
            }
            .event-dot {
                width: 8px;
                height: 8px;
                border-radius: 50%;
                margin-right: 4px;
                flex-shrink: 0;
            }
            .calendar-tooltip {
                position: absolute;
                background-color: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 5px 10px;
                border-radius: 3px;
                font-size: 12px;
                z-index: 200;
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.2s;
                white-space: nowrap;
            }
            .calendar-filters {
                display: flex;
                gap: 10px;
                margin-bottom: 15px;
                flex-wrap: wrap;
            }
            .calendar-filter-item {
                display: flex;
                align-items: center;
                gap: 3px;
            }
            .calendar-filter-checkbox {
                margin: 0;
            }
            .calendar-event-count {
                position: absolute;
                top: 5px;
                left: 5px;
                background-color: #0052cc;
                color: white;
                border-radius: 50%;
                width: 18px;
                height: 18px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 10px;
                font-weight: bold;
            }
            .calendar-day.today {
                background-color: #f0f7ff;
            }
            .calendar-day-popup {
                display: none;
                position: absolute;
                left: 100%;
                top: 0;
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 10px;
                z-index: 100;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                min-width: 200px;
                max-height: 300px;
                overflow-y: auto;
            }
            .calendar-day:nth-child(7n) .calendar-day-popup,
            .calendar-day:nth-child(7n-1) .calendar-day-popup,
            .calendar-day:nth-child(7n-2) .calendar-day-popup {
                left: auto;
                right: 100%;
            }
            .calendar-day:hover .calendar-day-popup {
                display: block;
            }
            .calendar-popup-event {
                display: flex;
                align-items: center;
                margin-bottom: 5px;
                cursor: pointer;
                padding: 3px;
                border-radius: 3px;
            }
            .calendar-popup-event:hover {
                background-color: #f5f5f5;
            }
            .popup-event-dot {
                width: 10px;
                height: 10px;
                border-radius: 50%;
                margin-right: 5px;
            }
            .popup-event-env {
                font-weight: bold;
                margin-right: 5px;
            }
            .popup-event-time {
                font-size: 11px;
                color: #666;
            }
            .calendar-month-navigation {
                display: flex;
                justify-content: center;
                gap: 10px;
                margin-bottom: 15px;
            }
            .month-nav-button {
                background-color: #f0f0f0;
                border: 1px solid #ddd;
                border-radius: 3px;
                padding: 5px 10px;
                cursor: pointer;
            }
            .month-nav-button:hover {
                background-color: #e0e0e0;
            }
        `;
        content.appendChild(style);

        // Táblázat létrehozása
        const table = document.createElement('table');
        table.className = 'deployment-table';

        // Táblázat fejléc
        const thead = document.createElement('thead');
        const headerRow = document.createElement('tr');

        const statusHeader = document.createElement('th');
        statusHeader.style.width = '20px';
        headerRow.appendChild(statusHeader);

        const envHeader = document.createElement('th');
        envHeader.textContent = 'Környezet';
        headerRow.appendChild(envHeader);

        const deploymentsHeader = document.createElement('th');
        deploymentsHeader.textContent = 'Kitelepítések';
        headerRow.appendChild(deploymentsHeader);

        thead.appendChild(headerRow);
        table.appendChild(thead);

        // Táblázat törzs
        const tbody = document.createElement('tbody');

        deployments.forEach(({env, deployed, dates, commentIds}) => {
            const row = document.createElement('tr');

            // Státusz cella
            const statusCell = document.createElement('td');
            statusCell.style.textAlign = 'center';
            statusCell.textContent = deployed ? '✅' : '❌';
            row.appendChild(statusCell);

            // Környezet cella
            const envCell = document.createElement('td');
            envCell.textContent = env;
            row.appendChild(envCell);

            // Kitelepítések cella
            const deploymentsCell = document.createElement('td');

            if (deployed) {
                const dateCount = dates.length;
                const countSpan = document.createElement('span');
                countSpan.className = 'deployment-count';
                countSpan.textContent = `${dateCount} db`;
                deploymentsCell.appendChild(countSpan);

                // Év és hónap szerint csoportosítva jelenítjük meg a dátumokat
                const groupedDates = groupDatesByYearMonth(dates, commentIds);

                Object.values(groupedDates).forEach(group => {
                    const year = group.year;
                    const monthName = new Date(year, group.month, 1).toLocaleString('hu-HU', { month: 'long' });

                    const monthDiv = document.createElement('div');
                    monthDiv.className = 'deployment-month';
                    monthDiv.textContent = `${monthName} ${year}:`;
                    deploymentsCell.appendChild(monthDiv);

                    const datesDiv = document.createElement('div');
                    datesDiv.className = 'deployment-dates';

                    // Rendezzük a dátumokat csökkenő sorrendben a hónapon belül
                    const sortedItems = [...group.items].sort((a, b) => new Date(b.date) - new Date(a.date));

                    sortedItems.forEach(item => {
                        const dateChip = document.createElement('span');
                        dateChip.className = 'date-chip';
                        dateChip.title = item.date;
                        dateChip.setAttribute('data-comment-id', item.commentId);
                        dateChip.textContent = formatShortDate(item.date);
                        datesDiv.appendChild(dateChip);
                    });

                    deploymentsCell.appendChild(datesDiv);
                });
            }

            row.appendChild(deploymentsCell);
            tbody.appendChild(row);
        });

        table.appendChild(tbody);
        content.appendChild(table);

        // Naptár gomb
        const calendarButton = document.createElement('button');
        calendarButton.className = 'calendar-button';
        calendarButton.textContent = 'Naptár Megjelenítése';
        content.appendChild(calendarButton);

        newSection.appendChild(content);

        return newSection;
    }

    function createCalendarModal() {
        // Naptár modal létrehozása
        const calendarModal = document.createElement('div');
        calendarModal.id = 'calendarModal';
        calendarModal.className = 'calendar-modal';

        const modalContent = document.createElement('div');
        modalContent.className = 'calendar-modal-content';

        // Modal fejléc
        const modalHeader = document.createElement('div');
        modalHeader.className = 'calendar-header';

        const modalTitle = document.createElement('h3');
        modalTitle.className = 'calendar-title';
        modalTitle.textContent = 'Kitelepítések Naptára';
        modalHeader.appendChild(modalTitle);

        const closeButton = document.createElement('span');
        closeButton.className = 'calendar-close';
        closeButton.innerHTML = '&times;';
        modalHeader.appendChild(closeButton);

        modalContent.appendChild(modalHeader);

        // Jelmagyarázat
        const legend = document.createElement('div');
        legend.className = 'calendar-legend';

        environmentOrder.forEach(env => {
            const legendItem = document.createElement('div');
            legendItem.className = 'legend-item';

            const colorDot = document.createElement('div');
            colorDot.className = 'legend-color';
            colorDot.style.backgroundColor = environmentColors[env];
            legendItem.appendChild(colorDot);

            const envName = document.createElement('span');
            envName.textContent = env;
            legendItem.appendChild(envName);

            legend.appendChild(legendItem);
        });

        modalContent.appendChild(legend);

        // Szűrők
        const filters = document.createElement('div');
        filters.className = 'calendar-filters';

        const filterLabel = document.createElement('span');
        filterLabel.textContent = 'Szűrés:';
        filters.appendChild(filterLabel);

        environmentOrder.forEach(env => {
            const filterItem = document.createElement('div');
            filterItem.className = 'calendar-filter-item';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'calendar-filter-checkbox';
            checkbox.id = `calendar-filter-${env}`;
            checkbox.setAttribute('data-env', env);
            checkbox.checked = true;
            filterItem.appendChild(checkbox);

            const label = document.createElement('label');
            label.htmlFor = `calendar-filter-${env}`;
            label.textContent = env;
            filterItem.appendChild(label);

            filters.appendChild(filterItem);
        });

        modalContent.appendChild(filters);

        // Hónap navigáció
        const monthNavigation = document.createElement('div');
        monthNavigation.className = 'calendar-month-navigation';
        monthNavigation.id = 'calendarMonthNavigation';

        const prevButton = document.createElement('button');
        prevButton.className = 'month-nav-button';
        prevButton.id = 'prevMonthButton';
        prevButton.textContent = '< Előző hónap';
        monthNavigation.appendChild(prevButton);

        const allMonthsButton = document.createElement('button');
        allMonthsButton.className = 'month-nav-button';
        allMonthsButton.id = 'allMonthsButton';
        allMonthsButton.textContent = 'Összes hónap';
        monthNavigation.appendChild(allMonthsButton);

        const nextButton = document.createElement('button');
        nextButton.className = 'month-nav-button';
        nextButton.id = 'nextMonthButton';
        nextButton.textContent = 'Következő hónap >';
        monthNavigation.appendChild(nextButton);

        modalContent.appendChild(monthNavigation);

        // Naptár konténer
        const calendarContainer = document.createElement('div');
        calendarContainer.className = 'calendar-container';
        calendarContainer.id = 'calendarContainer';

        // Tooltip
        const tooltip = document.createElement('div');
        tooltip.className = 'calendar-tooltip';
        tooltip.id = 'calendarTooltip';
        calendarContainer.appendChild(tooltip);

        modalContent.appendChild(calendarContainer);
        calendarModal.appendChild(modalContent);

        return calendarModal;
    }

    function navigateToComment(commentId) {
        // Aktiváljuk a kommentek fület, ha még nincs aktiválva
        const commentsTab = document.querySelector('#comment-tabpanel');
        if (commentsTab && !commentsTab.classList.contains('active-tab')) {
            commentsTab.querySelector('a').click();
            // Várunk egy kicsit, hogy a kommentek betöltődjenek
            setTimeout(() => {
                scrollToComment(commentId);
            }, 500);
        } else {
            scrollToComment(commentId);
        }
    }

    function scrollToComment(commentId) {
        const commentElement = document.getElementById(commentId);
        if (commentElement) {
            // Kiemeljük a kommentet
            commentElement.style.transition = 'background-color 0.5s';
            commentElement.style.backgroundColor = '#ffffc0';

            // Odagörgetünk a kommenthez
            commentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

            // Visszaállítjuk az eredeti háttérszínt
            setTimeout(() => {
                commentElement.style.backgroundColor = '';
            }, 3000);
        }
    }

    function renderCalendar(deployments) {
        // Összegyűjtjük az összes dátumot minden környezetből
        let allDeployments = [];
        deployments.forEach(({env, dates, commentIds}) => {
            dates.forEach((date, index) => {
                allDeployments.push({
                    env: env,
                    date: new Date(date),
                    commentId: commentIds[index]
                });
            });
        });

        // Szűrjük a környezeteket a kiválasztott szűrők alapján
        const filterCheckboxes = document.querySelectorAll('.calendar-filter-checkbox');
        const enabledEnvironments = Array.from(filterCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.getAttribute('data-env'));

        allDeployments = allDeployments.filter(deployment =>
            enabledEnvironments.includes(deployment.env)
        );

        if (allDeployments.length === 0) {
            const container = document.getElementById('calendarContainer');
            container.innerHTML = '<p style="text-align: center; margin-top: 50px;">Nincs megjeleníthető kitelepítés a kiválasztott szűrőkkel.</p>';
            return;
        }

        // Rendezzük a dátumokat növekvő sorrendben
        allDeployments.sort((a, b) => a.date - b.date);

        // Meghatározzuk az első és utolsó hónapot
        const firstDate = allDeployments[0].date;
        const lastDate = allDeployments[allDeployments.length - 1].date;

        const firstYear = firstDate.getFullYear();
        const firstMonth = firstDate.getMonth();
        const lastYear = lastDate.getFullYear();
        const lastMonth = lastDate.getMonth();

        // Csoportosítjuk a kitelepítéseket dátum szerint
        const deploymentsByDate = {};
        allDeployments.forEach(deployment => {
            const dateKey = `${deployment.date.getFullYear()}-${deployment.date.getMonth() + 1}-${deployment.date.getDate()}`;

            if (!deploymentsByDate[dateKey]) {
                deploymentsByDate[dateKey] = [];
            }

            deploymentsByDate[dateKey].push(deployment);
        });

        // Ellenőrizzük, hogy van-e aktív hónap szűrés
        const currentMonthKey = document.getElementById('calendarContainer').getAttribute('data-current-month');

        if (currentMonthKey && currentMonthKey !== 'all') {
            const [year, month] = currentMonthKey.split('-').map(Number);
            renderSingleMonth(year, month, deploymentsByDate);
        } else {
            renderAllMonths(firstYear, firstMonth, lastYear, lastMonth, deploymentsByDate);
        }
    }

    function renderAllMonths(firstYear, firstMonth, lastYear, lastMonth, deploymentsByDate) {
        const container = document.getElementById('calendarContainer');
        container.innerHTML = '';
        container.setAttribute('data-current-month', 'all');

        // Végigmegyünk az összes hónapon az első és utolsó között
        let currentYear = firstYear;
        let currentMonth = firstMonth;

        while (currentYear < lastYear || (currentYear === lastYear && currentMonth <= lastMonth)) {
            renderMonthCalendar(currentYear, currentMonth, deploymentsByDate, container);

            // Következő hónap
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
        }
    }

    function renderSingleMonth(year, month, deploymentsByDate) {
        const container = document.getElementById('calendarContainer');
        container.innerHTML = '';
        container.setAttribute('data-current-month', `${year}-${month}`);

        renderMonthCalendar(year, month, deploymentsByDate, container);
    }

    function renderMonthCalendar(year, month, deploymentsByDate, container) {
        const monthCalendar = document.createElement('div');
        monthCalendar.className = 'month-calendar';

        // Hónap fejléc
        const monthHeader = document.createElement('div');
        monthHeader.className = 'month-header';
        const monthDate = new Date(year, month, 1);
        const monthName = monthDate.toLocaleString('hu-HU', { month: 'long', year: 'numeric' });
        monthHeader.textContent = monthName;
        monthCalendar.appendChild(monthHeader);

        // Naptár rács
        const calendarGrid = document.createElement('div');
        calendarGrid.className = 'calendar-grid';

        // Nap fejlécek
        const dayNames = ['Hétfő', 'Kedd', 'Szerda', 'Csütörtök', 'Péntek', 'Szombat', 'Vasárnap'];
        dayNames.forEach(day => {
            const dayHeader = document.createElement('div');
            dayHeader.className = 'calendar-day-header';
            dayHeader.textContent = day;
            calendarGrid.appendChild(dayHeader);
        });

        // Hónap első napja
        const firstDay = new Date(year, month, 1);
        // Hónap utolsó napja
        const lastDay = new Date(year, month + 1, 0);

        // Első nap a hét melyik napja (0: vasárnap, 1: hétfő, ..., 6: szombat)
        let firstDayOfWeek = firstDay.getDay();
        // Átalakítjuk, hogy hétfő legyen az első nap (1: hétfő, ..., 7: vasárnap)
        firstDayOfWeek = firstDayOfWeek === 0 ? 7 : firstDayOfWeek;

        // Üres cellák az első nap előtt
        for (let i = 1; i < firstDayOfWeek; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.className = 'calendar-day empty';
            calendarGrid.appendChild(emptyDay);
        }

        // Napok a hónapban
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        for (let day = 1; day <= lastDay.getDate(); day++) {
            const currentDate = new Date(year, month, day);
            const dateKey = `${year}-${month + 1}-${day}`;
            const isToday = currentDate.getTime() === today.getTime();

            const dayCell = document.createElement('div');
            dayCell.className = `calendar-day${isToday ? ' today' : ''}`;

            // Nap szám
            const dayNumber = document.createElement('div');
            dayNumber.className = 'calendar-day-number';
            dayNumber.textContent = day;
            dayCell.appendChild(dayNumber);

            // Események ezen a napon
            const events = deploymentsByDate[dateKey] || [];

            if (events.length > 0) {
                // Esemény számláló
                const eventCount = document.createElement('div');
                eventCount.className = 'calendar-event-count';
                eventCount.textContent = events.length;
                dayCell.appendChild(eventCount);

                // Események konténer
                const eventsContainer = document.createElement('div');
                eventsContainer.className = 'calendar-day-events';

                // Legfeljebb 3 eseményt jelenítünk meg közvetlenül
                const visibleEvents = events.slice(0, 3);

                visibleEvents.forEach(event => {
                    const eventDiv = document.createElement('div');
                    eventDiv.className = 'calendar-event';
                    eventDiv.setAttribute('data-comment-id', event.commentId);

                    const eventDot = document.createElement('span');
                    eventDot.className = 'event-dot';
                    eventDot.style.backgroundColor = environmentColors[event.env];

                    const eventText = document.createElement('span');
                    eventText.textContent = `${event.env} ${event.date.getHours()}:${String(event.date.getMinutes()).padStart(2, '0')}`;

                    eventDiv.appendChild(eventDot);
                    eventDiv.appendChild(eventText);
                    eventsContainer.appendChild(eventDiv);

                    // Esemény kattintás
                    eventDiv.addEventListener('click', function() {
                        const commentId = this.getAttribute('data-comment-id');
                        if (commentId) {
                            navigateToComment(commentId);
                        }
                    });
                });

                // Ha több esemény van, mint amit megjelenítünk
                if (events.length > 3) {
                    const moreEvents = document.createElement('div');
                    moreEvents.className = 'calendar-event';
                    moreEvents.style.color = '#0052cc';
                    moreEvents.textContent = `+ ${events.length - 3} további...`;
                    eventsContainer.appendChild(moreEvents);
                }

                dayCell.appendChild(eventsContainer);

                // Felugró ablak az összes eseménnyel
                if (events.length > 0) {
                    const popup = document.createElement('div');
                    popup.className = 'calendar-day-popup';

                    // Ellenőrizzük a nap pozícióját a hétben (1-7)
                    const dayPosition = (firstDayOfWeek - 1 + day - 1) % 7 + 1;

                    // Ha a hét utolsó 3 napjáról van szó, jobbra igazítjuk a popupot
                    if (dayPosition >= 5) {
                        popup.style.left = 'auto';
                        popup.style.right = '100%';
                    }

                    const popupHeader = document.createElement('div');
                    popupHeader.style.fontWeight = 'bold';
                    popupHeader.style.marginBottom = '5px';
                    popupHeader.textContent = `${year}.${String(month + 1).padStart(2, '0')}.${String(day).padStart(2, '0')} - ${events.length} kitelepítés`;
                    popup.appendChild(popupHeader);

                    // Rendezzük az eseményeket időpont szerint
                    const sortedEvents = [...events].sort((a, b) => a.date - b.date);

                    sortedEvents.forEach(event => {
                        const eventItem = document.createElement('div');
                        eventItem.className = 'calendar-popup-event';
                        eventItem.setAttribute('data-comment-id', event.commentId);

                        const eventDot = document.createElement('span');
                        eventDot.className = 'popup-event-dot';
                        eventDot.style.backgroundColor = environmentColors[event.env];

                        const eventEnv = document.createElement('span');
                        eventEnv.className = 'popup-event-env';
                        eventEnv.textContent = event.env;

                        const eventTime = document.createElement('span');
                        eventTime.className = 'popup-event-time';
                        eventTime.textContent = `${event.date.getHours()}:${String(event.date.getMinutes()).padStart(2, '0')}`;

                        eventItem.appendChild(eventDot);
                        eventItem.appendChild(eventEnv);
                        eventItem.appendChild(eventTime);
                        popup.appendChild(eventItem);

                        // Esemény kattintás
                        eventItem.addEventListener('click', function() {
                            const commentId = this.getAttribute('data-comment-id');
                            if (commentId) {
                                navigateToComment(commentId);
                            }
                        });
                    });

                    dayCell.appendChild(popup);
                }
            }

            calendarGrid.appendChild(dayCell);
        }

        // Üres cellák a hónap végén
        const lastDayOfWeek = lastDay.getDay();
        // Ha vasárnap az utolsó nap, nem kell üres cella
        if (lastDayOfWeek !== 0) {
            for (let i = lastDayOfWeek; i < 7; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day empty';
                calendarGrid.appendChild(emptyDay);
            }
        }

        monthCalendar.appendChild(calendarGrid);
        container.appendChild(monthCalendar);
    }

    function navigateMonth(direction) {
        const container = document.getElementById('calendarContainer');
        const currentMonthKey = container.getAttribute('data-current-month');

        // Ha minden hónap meg van jelenítve, akkor nem navigálunk
        if (currentMonthKey === 'all') {
            return;
        }

        const [year, month] = currentMonthKey.split('-').map(Number);
        let newYear = year;
        let newMonth = month;

        if (direction === 'prev') {
            newMonth--;
            if (newMonth < 0) {
                newMonth = 11;
                newYear--;
            }
        } else {
            newMonth++;
            if (newMonth > 11) {
                newMonth = 0;
                newYear++;
            }
        }

        // Frissítjük a naptárat az új hónappal
        const deployments = processComments(getCommentsWithoutActivation());

        // Összegyűjtjük az összes dátumot minden környezetből
        let allDeployments = [];
        deployments.forEach(({env, dates, commentIds}) => {
            dates.forEach((date, index) => {
                allDeployments.push({
                    env: env,
                    date: new Date(date),
                    commentId: commentIds[index]
                });
            });
        });

        // Szűrjük a környezeteket a kiválasztott szűrők alapján
        const filterCheckboxes = document.querySelectorAll('.calendar-filter-checkbox');
        const enabledEnvironments = Array.from(filterCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.getAttribute('data-env'));

        allDeployments = allDeployments.filter(deployment =>
            enabledEnvironments.includes(deployment.env)
        );

        // Csoportosítjuk a kitelepítéseket dátum szerint
        const deploymentsByDate = {};
        allDeployments.forEach(deployment => {
            const dateKey = `${deployment.date.getFullYear()}-${deployment.date.getMonth() + 1}-${deployment.date.getDate()}`;

            if (!deploymentsByDate[dateKey]) {
                deploymentsByDate[dateKey] = [];
            }

            deploymentsByDate[dateKey].push(deployment);
        });

        renderSingleMonth(newYear, newMonth, deploymentsByDate);
    }

    function processComments(comments) {
        const deployments = Object.fromEntries(
            environmentOrder.map(env => [env, { deployed: false, dates: [], commentIds: [] }])
        );

        comments.forEach(comment => {
            const commentText = comment.querySelector('.action-body').textContent.trim();
            const commentId = comment.id;

            // Ellenőrizzük az összes környezetet
            for (const [env, pattern] of Object.entries(environmentPatterns)) {
                if (commentText.includes(pattern)) {
                    const dateElement = comment.querySelector('.action-details .date');
                    const date = dateElement ? dateElement.getAttribute('title') : 'Ismeretlen dátum';
                    deployments[env].deployed = true;
                    deployments[env].dates.push(date);
                    deployments[env].commentIds.push(commentId);
                }
            }
        });

        // Dátumok rendezése minden környezetnél (legújabb elöl)
        Object.values(deployments).forEach(env => {
            // Párhuzamosan rendezzük a dátumokat és a komment ID-kat
            const combined = env.dates.map((date, i) => ({ date, commentId: env.commentIds[i] }));
            combined.sort((a, b) => new Date(b.date) - new Date(a.date));

            env.dates = combined.map(item => item.date);
            env.commentIds = combined.map(item => item.commentId);
        });

        return environmentOrder.map(env => ({
            env: env,
            deployed: deployments[env].deployed,
            dates: deployments[env].dates,
            commentIds: deployments[env].commentIds
        }));
    }

    function insertDeploymentSection(deployments) {
        const timeTrackingModule = document.getElementById('timetrackingmodule');
        if (!timeTrackingModule) {
            console.log('Time Tracking module not found, retrying...');
            setTimeout(() => insertDeploymentSection(deployments), 500);
            return;
        }

        const existingDeploymentModule = document.getElementById('deploymentModule');
        if (existingDeploymentModule) {
            existingDeploymentModule.remove();
        }

        const newSection = createDeploymentSection(deployments);
        timeTrackingModule.parentNode.insertBefore(newSection, timeTrackingModule);

        // Naptár modal hozzáadása a DOM-hoz
        const existingModal = document.getElementById('calendarModal');
        if (existingModal) {
            existingModal.remove();
        }

        const calendarModal = createCalendarModal();
        document.body.appendChild(calendarModal);

        // Eseménykezelők hozzáadása
        setupEventHandlers(deployments);
    }

    function setupEventHandlers(deployments) {
        // Dátum chipek eseménykezelői
        const dateChips = document.querySelectorAll('.date-chip');
        dateChips.forEach(chip => {
            chip.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');
                if (commentId) {
                    navigateToComment(commentId);
                }
            });
        });

        // Naptár gomb eseménykezelője
        const calendarButton = document.querySelector('.calendar-button');
        const calendarModal = document.getElementById('calendarModal');
        const calendarClose = document.querySelector('.calendar-close');

        if (calendarButton) {
            calendarButton.addEventListener('click', function() {
                calendarModal.style.display = 'block';
                renderCalendar(deployments);
            });
        }

        if (calendarClose) {
            calendarClose.addEventListener('click', function() {
                calendarModal.style.display = 'none';
            });
        }

        window.addEventListener('click', function(event) {
            if (event.target === calendarModal) {
                calendarModal.style.display = 'none';
            }
        });

        // Szűrők eseménykezelői
        const filterCheckboxes = document.querySelectorAll('.calendar-filter-checkbox');
        filterCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                renderCalendar(deployments);
            });
        });

        // Hónap navigáció eseménykezelői
        const prevMonthButton = document.getElementById('prevMonthButton');
        const nextMonthButton = document.getElementById('nextMonthButton');
        const allMonthsButton = document.getElementById('allMonthsButton');

        if (prevMonthButton) {
            prevMonthButton.addEventListener('click', function() {
                navigateMonth('prev');
            });
        }

        if (nextMonthButton) {
            nextMonthButton.addEventListener('click', function() {
                navigateMonth('next');
            });
        }

        if (allMonthsButton) {
            allMonthsButton.addEventListener('click', function() {
                renderCalendar(deployments);
            });
        }
    }

    function getCommentsWithoutActivation() {
        return document.querySelectorAll('.issue-data-block.activity-comment');
    }

    function activateCommentsTab() {
        const commentsTab = document.querySelector('#comment-tabpanel');
        if (commentsTab && !commentsTab.classList.contains('active-tab')) {
            commentsTab.querySelector('a').click();
            return true;
        }
        return false;
    }

    function main() {
        let comments = getCommentsWithoutActivation();

        if (comments.length === 0) {
            if (activateCommentsTab()) {
                setTimeout(main, 1000); // Várunk 1 másodpercet a fül aktiválása után
                return;
            } else {
                console.log('Nem sikerült aktiválni a Comments fület');
                return;
            }
        }

        const deployments = processComments(comments);
        insertDeploymentSection(deployments);
    }

    // Várunk 5 másodpercet, mielőtt elindítjuk a szkriptet
    setTimeout(main, 5000);
})();
