// ==UserScript==
// @name         JIRA IIER2ELES Kitelepítés Összesítő
// @namespace    http://tampermonkey.net/
// @version      1.8
// @description  Kigyűjti és megjeleníti a kitelepítési információkat az IIER2ELES JIRA kommentekből az új környezetekre
// @match        https://jira.ulyssys.hu/browse/IIER2ELES-*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const environmentOrder = [
        'TST',
        'ATD',
        'MVH TESZT',
        'MVH ELESTESZT',
        'MVHELES'
    ];

    // Környezetek és a hozzájuk tartozó komment minták
    const environmentPatterns = {
        'TST': 'Issue-hoz tartozó commit települt TST környezetre',
        'ATD': 'Issue-hoz tartozó commit települt ATD környezetre',
        'MVH TESZT': 'Issue-hoz tartozó commit települt MVHTESZT környezetre',
        'MVH ELESTESZT': 'Issue-hoz tartozó commit települt MVHELESTESZT környezetre',
        'MVHELES': 'Issue-hoz tartozó commit települt MVHELES környezetre'
    };

    // Környezetek színei az idővonalhoz
    const environmentColors = {
        'TST': '#4CAF50',
        'ATD': '#2196F3',
        'MVH TESZT': '#FF9800',
        'MVH ELESTESZT': '#9C27B0',
        'MVHELES': '#F44336'
    };

    // Dátum formázó függvény
    function formatDate(dateString) {
        const date = new Date(dateString);
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');

        return `${month}.${day} ${hours}:${minutes}`;
    }

    // Rövidebb dátum formázó függvény a chipekhez
    function formatShortDate(dateString) {
        const date = new Date(dateString);
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');

        return `${month}.${day} ${hours}:${minutes}`;
    }

    // Teljes dátum formázó függvény az idővonalhoz
    function formatFullDate(dateString) {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');

        return `${year}.${month}.${day} ${hours}:${minutes}`;
    }

    // Dátumok csoportosítása év és hónap szerint
    function groupDatesByYearMonth(dates, commentIds) {
        const grouped = {};

        dates.forEach((date, index) => {
            const dateObj = new Date(date);
            const year = dateObj.getFullYear();
            const month = dateObj.getMonth();
            const yearMonthKey = `${year}-${month}`;

            if (!grouped[yearMonthKey]) {
                grouped[yearMonthKey] = {
                    year: year,
                    month: month,
                    items: []
                };
            }

            grouped[yearMonthKey].items.push({
                date: date,
                commentId: commentIds[index]
            });
        });

        // Rendezzük a csoportokat év és hónap szerint csökkenő sorrendben
        const sortedKeys = Object.keys(grouped).sort((a, b) => {
            const [yearA, monthA] = a.split('-').map(Number);
            const [yearB, monthB] = b.split('-').map(Number);

            if (yearA !== yearB) {
                return yearB - yearA; // Csökkenő év szerinti rendezés
            }
            return monthB - monthA; // Csökkenő hónap szerinti rendezés
        });

        const result = {};
        sortedKeys.forEach(key => {
            result[key] = grouped[key];
        });

        return result;
    }

    function createDeploymentSection(deployments) {
        const newSection = document.createElement('div');
        newSection.id = 'deploymentModule';
        newSection.className = 'module toggle-wrap';

        // Fejléc hozzáadása
        const header = document.createElement('div');
        header.className = 'mod-header';
        header.innerHTML = '<h4 class="toggle-title">Kitelepítési Információk (Új Környezetek)</h4>';
        newSection.appendChild(header);

        // Tartalom konténer létrehozása
        const content = document.createElement('div');
        content.className = 'mod-content';

        // Stílusok hozzáadása
        const style = document.createElement('style');
        style.textContent = `
            .deployment-table {
                width: 100%;
                border-collapse: collapse;
            }
            .deployment-table th {
                text-align: left;
                padding: 5px;
                border-bottom: 1px solid #ddd;
                background-color: #f5f5f5;
            }
            .deployment-table td {
                padding: 5px;
                border-bottom: 1px solid #eee;
                vertical-align: top;
            }
            .deployment-dates {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                margin-bottom: 10px;
            }
            .date-chip {
                background-color: #f0f0f0;
                border-radius: 12px;
                padding: 2px 8px;
                font-size: 12px;
                white-space: nowrap;
                cursor: pointer;
                transition: background-color 0.2s;
            }
            .date-chip:hover {
                background-color: #e0e0e0;
                text-decoration: underline;
            }
            .deployment-count {
                font-weight: bold;
                margin-left: 5px;
                color: #555;
            }
            .deployment-month {
                margin-top: 5px;
                margin-bottom: 3px;
                font-weight: bold;
                color: #555;
            }
            .timeline-button {
                background-color: #0052cc;
                color: white;
                border: none;
                border-radius: 3px;
                padding: 5px 10px;
                margin-top: 10px;
                cursor: pointer;
                font-size: 13px;
                transition: background-color 0.2s;
            }
            .timeline-button:hover {
                background-color: #0065ff;
            }
            .timeline-modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: auto;
                background-color: rgba(0,0,0,0.4);
            }
            .timeline-modal-content {
                background-color: #fefefe;
                margin: 5% auto;
                padding: 20px;
                border: 1px solid #ddd;
                border-radius: 5px;
                width: 90%;
                max-width: 1200px;
                max-height: 80vh;
                overflow-y: auto;
            }
            .timeline-close {
                color: #aaa;
                float: right;
                font-size: 28px;
                font-weight: bold;
                cursor: pointer;
            }
            .timeline-close:hover {
                color: black;
            }
            .timeline-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 15px;
            }
            .timeline-title {
                margin: 0;
            }
            .timeline-container {
                position: relative;
                margin-top: 30px;
                padding-bottom: 30px;
                overflow-x: auto;
                min-height: 200px;
            }
            .timeline-inner {
                position: relative;
                height: 100%;
                min-width: 100%;
            }
            .timeline-line {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 2px;
                background-color: #ddd;
            }
            .timeline-item {
                position: absolute;
                transform: translate(-50%, 0);
                cursor: pointer;
                z-index: 5;
            }
            .timeline-dot {
                width: 12px;
                height: 12px;
                border-radius: 50%;
                margin: 0 auto;
            }
            .timeline-label {
                margin-top: 5px;
                font-size: 11px;
                white-space: nowrap;
                text-align: center;
                transform: rotate(-45deg);
                transform-origin: left top;
                margin-left: 10px;
                margin-top: 15px;
            }
            .timeline-env {
                font-weight: bold;
            }
            .timeline-date {
                font-size: 10px;
            }
            .timeline-legend {
                display: flex;
                flex-wrap: wrap;
                gap: 15px;
                margin-bottom: 15px;
            }
            .legend-item {
                display: flex;
                align-items: center;
            }
            .legend-color {
                width: 12px;
                height: 12px;
                border-radius: 50%;
                margin-right: 5px;
            }
            .timeline-controls {
                display: flex;
                gap: 10px;
                margin-bottom: 15px;
                flex-wrap: wrap;
            }
            .timeline-zoom {
                display: flex;
                gap: 5px;
            }
            .timeline-zoom button {
                background-color: #f0f0f0;
                border: 1px solid #ddd;
                border-radius: 3px;
                padding: 3px 8px;
                cursor: pointer;
            }
            .timeline-zoom button:hover {
                background-color: #e0e0e0;
            }
            .timeline-zoom button.active {
                background-color: #0052cc;
                color: white;
                border-color: #0052cc;
            }
            .timeline-tooltip {
                position: absolute;
                background-color: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 5px 10px;
                border-radius: 3px;
                font-size: 12px;
                z-index: 100;
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.2s;
            }
            .timeline-date-markers {
                position: absolute;
                top: -25px;
                left: 0;
                width: 100%;
                height: 20px;
            }
            .timeline-date-marker {
                position: absolute;
                transform: translateX(-50%);
                font-size: 10px;
                color: #666;
            }
            .timeline-date-marker::after {
                content: '';
                position: absolute;
                top: 15px;
                left: 50%;
                height: 5px;
                width: 1px;
                background-color: #ccc;
            }
            .timeline-navigation {
                display: flex;
                gap: 5px;
            }
            .timeline-navigation button {
                background-color: #f0f0f0;
                border: 1px solid #ddd;
                border-radius: 3px;
                padding: 3px 8px;
                cursor: pointer;
            }
            .timeline-navigation button:hover {
                background-color: #e0e0e0;
            }
            .timeline-scale {
                display: flex;
                align-items: center;
                gap: 5px;
            }
            .timeline-scale-slider {
                width: 150px;
            }
            .timeline-filter {
                display: flex;
                gap: 5px;
                align-items: center;
            }
            .timeline-filter-item {
                display: flex;
                align-items: center;
                gap: 3px;
            }
            .timeline-filter-checkbox {
                margin: 0;
            }
            .timeline-cluster {
                position: absolute;
                transform: translate(-50%, 0);
                cursor: pointer;
                z-index: 10;
            }
            .timeline-cluster-dot {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                background-color: #888;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 10px;
                font-weight: bold;
            }
            .timeline-cluster-popup {
                display: none;
                position: absolute;
                top: 25px;
                left: 50%;
                transform: translateX(-50%);
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 10px;
                z-index: 20;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                min-width: 200px;
                max-height: 300px;
                overflow-y: auto;
            }
            .timeline-cluster:hover .timeline-cluster-popup {
                display: block;
            }
            .cluster-item {
                display: flex;
                align-items: center;
                margin-bottom: 5px;
                cursor: pointer;
                padding: 3px;
                border-radius: 3px;
            }
            .cluster-item:hover {
                background-color: #f5f5f5;
            }
            .cluster-dot {
                width: 10px;
                height: 10px;
                border-radius: 50%;
                margin-right: 5px;
            }
            .cluster-env {
                font-weight: bold;
                margin-right: 5px;
            }
            .timeline-auto-fit {
                background-color: #0052cc;
                color: white;
                border: none;
                border-radius: 3px;
                padding: 3px 8px;
                cursor: pointer;
            }
            .timeline-auto-fit:hover {
                background-color: #0065ff;
            }
            .timeline-date-range {
                display: flex;
                gap: 10px;
                align-items: center;
                margin-bottom: 10px;
            }
            .timeline-date-input {
                padding: 3px;
                border: 1px solid #ddd;
                border-radius: 3px;
            }
            /* Új stílusok a jobb olvashatóságért */
            .high-zoom .timeline-label {
                transform: rotate(0deg);
                margin-left: 0;
                margin-top: 5px;
                background-color: rgba(255, 255, 255, 0.8);
                padding: 2px 4px;
                border-radius: 3px;
                border: 1px solid #ddd;
            }
            .high-zoom .timeline-item {
                min-width: 80px;
            }
        `;
        content.appendChild(style);

        // Táblázat létrehozása
        const table = document.createElement('table');
        table.className = 'deployment-table';

        // Táblázat fejléc
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th style="width: 20px;"></th>
                <th>Környezet</th>
                <th>Kitelepítések</th>
            </tr>
        `;
        table.appendChild(thead);

        // Táblázat törzs
        const tbody = document.createElement('tbody');

        deployments.forEach(({env, deployed, dates, commentIds}) => {
            const row = document.createElement('tr');

            // Státusz cella
            const statusCell = document.createElement('td');
            statusCell.style.textAlign = 'center';
            statusCell.textContent = deployed ? '✅' : '❌';
            row.appendChild(statusCell);

            // Környezet cella
            const envCell = document.createElement('td');
            envCell.textContent = env;
            row.appendChild(envCell);

            // Kitelepítések cella
            const deploymentsCell = document.createElement('td');

            if (deployed) {
                const dateCount = dates.length;
                const countSpan = document.createElement('span');
                countSpan.className = 'deployment-count';
                countSpan.textContent = `${dateCount} db`;
                deploymentsCell.appendChild(countSpan);

                // Év és hónap szerint csoportosítva jelenítjük meg a dátumokat
                const groupedDates = groupDatesByYearMonth(dates, commentIds);

                Object.values(groupedDates).forEach(group => {
                    const year = group.year;
                    const monthName = new Date(year, group.month, 1).toLocaleString('hu-HU', { month: 'long' });

                    const monthDiv = document.createElement('div');
                    monthDiv.className = 'deployment-month';
                    monthDiv.textContent = `${monthName} ${year}:`;
                    deploymentsCell.appendChild(monthDiv);

                    const datesDiv = document.createElement('div');
                    datesDiv.className = 'deployment-dates';

                    // Rendezzük a dátumokat csökkenő sorrendben a hónapon belül
                    const sortedItems = [...group.items].sort((a, b) => new Date(b.date) - new Date(a.date));

                    sortedItems.forEach(item => {
                        const dateChip = document.createElement('span');
                        dateChip.className = 'date-chip';
                        dateChip.title = item.date;
                        dateChip.setAttribute('data-comment-id', item.commentId);
                        dateChip.textContent = formatShortDate(item.date);
                        datesDiv.appendChild(dateChip);
                    });

                    deploymentsCell.appendChild(datesDiv);
                });
            }

            row.appendChild(deploymentsCell);
            tbody.appendChild(row);
        });

        table.appendChild(tbody);
        content.appendChild(table);

        // Idővonal gomb
        const timelineButton = document.createElement('button');
        timelineButton.className = 'timeline-button';
        timelineButton.textContent = 'Idővonal Megjelenítése';
        content.appendChild(timelineButton);

        newSection.appendChild(content);

        // Idővonal modal létrehozása
        const timelineModal = document.createElement('div');
        timelineModal.id = 'timelineModal';
        timelineModal.className = 'timeline-modal';

        const modalContent = document.createElement('div');
        modalContent.className = 'timeline-modal-content';

        // Modal fejléc
        const modalHeader = document.createElement('div');
        modalHeader.className = 'timeline-header';

        const modalTitle = document.createElement('h3');
        modalTitle.className = 'timeline-title';
        modalTitle.textContent = 'Kitelepítések Idővonala';
        modalHeader.appendChild(modalTitle);

        const closeButton = document.createElement('span');
        closeButton.className = 'timeline-close';
        closeButton.innerHTML = '&times;';
        modalHeader.appendChild(closeButton);

        modalContent.appendChild(modalHeader);

        // Jelmagyarázat
        const legend = document.createElement('div');
        legend.className = 'timeline-legend';

        environmentOrder.forEach(env => {
            const legendItem = document.createElement('div');
            legendItem.className = 'legend-item';

            const colorDot = document.createElement('div');
            colorDot.className = 'legend-color';
            colorDot.style.backgroundColor = environmentColors[env];
            legendItem.appendChild(colorDot);

            const envName = document.createElement('span');
            envName.textContent = env;
            legendItem.appendChild(envName);

            legend.appendChild(legendItem);
        });

        modalContent.appendChild(legend);

        // Dátum tartomány
        const dateRange = document.createElement('div');
        dateRange.className = 'timeline-date-range';

        const rangeLabel = document.createElement('span');
        rangeLabel.textContent = 'Időszak:';
        dateRange.appendChild(rangeLabel);

        const startDateInput = document.createElement('input');
        startDateInput.type = 'date';
        startDateInput.className = 'timeline-date-input';
        startDateInput.id = 'timelineStartDate';
        dateRange.appendChild(startDateInput);

        const rangeSeparator = document.createElement('span');
        rangeSeparator.textContent = '-';
        dateRange.appendChild(rangeSeparator);

        const endDateInput = document.createElement('input');
        endDateInput.type = 'date';
        endDateInput.className = 'timeline-date-input';
        endDateInput.id = 'timelineEndDate';
        dateRange.appendChild(endDateInput);

        const applyRangeButton = document.createElement('button');
        applyRangeButton.className = 'timeline-auto-fit';
        applyRangeButton.id = 'timelineApplyRange';
        applyRangeButton.textContent = 'Alkalmaz';
        dateRange.appendChild(applyRangeButton);

        const autoFitButton = document.createElement('button');
        autoFitButton.className = 'timeline-auto-fit';
        autoFitButton.id = 'timelineAutoFit';
        autoFitButton.textContent = 'Automatikus illesztés';
        dateRange.appendChild(autoFitButton);

        modalContent.appendChild(dateRange);

        // Vezérlők
        const controls = document.createElement('div');
        controls.className = 'timeline-controls';

        // Zoom gombok
        const zoomControls = document.createElement('div');
        zoomControls.className = 'timeline-zoom';

        const zoomLevels = [
            { name: 'day', label: 'Napi nézet' },
            { name: 'week', label: 'Heti nézet' },
            { name: 'month', label: 'Havi nézet', active: true },
            { name: 'year', label: 'Éves nézet' },
            { name: 'all', label: 'Összes' }
        ];

        zoomLevels.forEach(level => {
            const button = document.createElement('button');
            button.setAttribute('data-zoom', level.name);
            button.textContent = level.label;
            if (level.active) button.className = 'active';
            zoomControls.appendChild(button);
        });

        controls.appendChild(zoomControls);

        // Navigációs gombok
        const navigation = document.createElement('div');
        navigation.className = 'timeline-navigation';

        const prevButton = document.createElement('button');
        prevButton.id = 'timelinePrev';
        prevButton.innerHTML = '&lt;&lt; Előző';
        navigation.appendChild(prevButton);

        const nextButton = document.createElement('button');
        nextButton.id = 'timelineNext';
        nextButton.innerHTML = 'Következő &gt;&gt;';
        navigation.appendChild(nextButton);

        controls.appendChild(navigation);

        // Nagyítás csúszka
        const scaleControl = document.createElement('div');
        scaleControl.className = 'timeline-scale';

        const scaleLabel = document.createElement('span');
        scaleLabel.textContent = 'Nagyítás:';
        scaleControl.appendChild(scaleLabel);

        const scaleSlider = document.createElement('input');
        scaleSlider.type = 'range';
        scaleSlider.min = '1';
        scaleSlider.max = '30';  // Megnövelt nagyítási tartomány
        scaleSlider.value = '10'; // Alapértelmezetten nagyobb nagyítás
        scaleSlider.className = 'timeline-scale-slider';
        scaleSlider.id = 'timelineScale';
        scaleControl.appendChild(scaleSlider);

        controls.appendChild(scaleControl);

        // Szűrők
        const filterControl = document.createElement('div');
        filterControl.className = 'timeline-filter';

        const filterLabel = document.createElement('span');
        filterLabel.textContent = 'Szűrés:';
        filterControl.appendChild(filterLabel);

        environmentOrder.forEach(env => {
            const filterItem = document.createElement('div');
            filterItem.className = 'timeline-filter-item';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'timeline-filter-checkbox';
            checkbox.id = `filter-${env}`;
            checkbox.setAttribute('data-env', env);
            checkbox.checked = true;
            filterItem.appendChild(checkbox);

            const label = document.createElement('label');
            label.htmlFor = `filter-${env}`;
            label.textContent = env;
            filterItem.appendChild(label);

            filterControl.appendChild(filterItem);
        });

        controls.appendChild(filterControl);
        modalContent.appendChild(controls);

        // Idővonal konténer
        const timelineContainer = document.createElement('div');
        timelineContainer.className = 'timeline-container';
        timelineContainer.id = 'timelineContainer';

        const timelineInner = document.createElement('div');
        timelineInner.className = 'timeline-inner';
        timelineInner.id = 'timelineInner';

        const dateMarkers = document.createElement('div');
        dateMarkers.className = 'timeline-date-markers';
        dateMarkers.id = 'timelineDateMarkers';
        timelineInner.appendChild(dateMarkers);

        const timelineLine = document.createElement('div');
        timelineLine.className = 'timeline-line';
        timelineInner.appendChild(timelineLine);

        const timelineTooltip = document.createElement('div');
        timelineTooltip.className = 'timeline-tooltip';
        timelineTooltip.id = 'timelineTooltip';
        timelineInner.appendChild(timelineTooltip);

        timelineContainer.appendChild(timelineInner);
        modalContent.appendChild(timelineContainer);

        timelineModal.appendChild(modalContent);
        document.body.appendChild(timelineModal);

        // Eseménykezelők hozzáadása
        setTimeout(() => {
            // Dátum chipek eseménykezelői
            const dateChips = document.querySelectorAll('.date-chip');
            dateChips.forEach(chip => {
                chip.addEventListener('click', function() {
                    const commentId = this.getAttribute('data-comment-id');
                    if (commentId) {
                        navigateToComment(commentId);
                    }
                });
            });

            // Idővonal gomb eseménykezelője
            timelineButton.addEventListener('click', function() {
                timelineModal.style.display = 'block';

                // Automatikus illesztés az összes kitelepítésre
                autoFitTimeline(deployments);
            });

            closeButton.addEventListener('click', function() {
                timelineModal.style.display = 'none';
            });

            window.addEventListener('click', function(event) {
                if (event.target === timelineModal) {
                    timelineModal.style.display = 'none';
                }
            });

            // Zoom gombok eseménykezelői
            const zoomButtons = document.querySelectorAll('.timeline-zoom button');
            zoomButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const zoom = this.getAttribute('data-zoom');

                    // Aktív gomb kiemelése
                    zoomButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');

                    // Idővonal újrarajzolása
                    renderTimeline(deployments, zoom, parseInt(scaleSlider.value));
                });
            });

            // Nagyítás csúszka eseménykezelője
            scaleSlider.addEventListener('input', function() {
                const activeZoomButton = document.querySelector('.timeline-zoom button.active');
                const zoom = activeZoomButton ? activeZoomButton.getAttribute('data-zoom') : 'month';
                renderTimeline(deployments, zoom, parseInt(this.value));
            });

            // Navigációs gombok eseménykezelői
            prevButton.addEventListener('click', function() {
                navigateTimeline('prev');
            });

            nextButton.addEventListener('click', function() {
                navigateTimeline('next');
            });

            // Szűrők eseménykezelői
            const filterCheckboxes = document.querySelectorAll('.timeline-filter-checkbox');
            filterCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const activeZoomButton = document.querySelector('.timeline-zoom button.active');
                    const zoom = activeZoomButton ? activeZoomButton.getAttribute('data-zoom') : 'month';
                    renderTimeline(deployments, zoom, parseInt(scaleSlider.value));
                });
            });

            // Automatikus illesztés gomb eseménykezelője
            autoFitButton.addEventListener('click', function() {
                autoFitTimeline(deployments);
            });

            // Dátum tartomány alkalmazása gomb eseménykezelője
            applyRangeButton.addEventListener('click', function() {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);

                if (startDate && endDate && startDate <= endDate) {
                    // Beállítjuk az időtartományt és újrarajzoljuk az idővonalat
                    endDate.setHours(23, 59, 59, 999); // A végdátum legyen a nap vége

                    currentTimelineStart = startDate;
                    currentTimelineEnd = endDate;

                    // Meghatározzuk a megfelelő zoom szintet az időtartam alapján
                    const timeRange = endDate - startDate;
                    let zoom = 'month';

                    if (timeRange <= 2 * 24 * 60 * 60 * 1000) {
                        zoom = 'day';
                    } else if (timeRange <= 14 * 24 * 60 * 60 * 1000) {
                        zoom = 'week';
                    } else if (timeRange <= 180 * 24 * 60 * 60 * 1000) {
                        zoom = 'month';
                    } else {
                        zoom = 'year';
                    }

                    // Frissítjük az aktív zoom gombot
                    zoomButtons.forEach(btn => {
                        btn.classList.remove('active');
                        if (btn.getAttribute('data-zoom') === zoom) {
                            btn.classList.add('active');
                        }
                    });

                    // Beállítjuk a nagyítást az időtartam alapján
                    scaleSlider.value = 15; // Alapértelmezetten nagyobb nagyítás

                    renderTimelineWithDates(startDate, endDate, parseInt(scaleSlider.value));
                }
            });

        }, 100);

        return newSection;
    }

    // Globális változók az idővonal navigációhoz
    let currentTimelineStart = null;
    let currentTimelineEnd = null;
    let currentZoom = 'month';
    let currentScale = 10;

    function autoFitTimeline(deployments) {
        // Összegyűjtjük az összes dátumot minden környezetből
        let allDeployments = [];
        deployments.forEach(({env, dates, commentIds}) => {
            dates.forEach((date, index) => {
                allDeployments.push({
                    env: env,
                    date: new Date(date),
                    commentId: commentIds[index]
                });
            });
        });

        // Szűrjük a környezeteket a kiválasztott szűrők alapján
        const filterCheckboxes = document.querySelectorAll('.timeline-filter-checkbox');
        const enabledEnvironments = Array.from(filterCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.getAttribute('data-env'));

        allDeployments = allDeployments.filter(deployment =>
            enabledEnvironments.includes(deployment.env)
        );

        if (allDeployments.length === 0) {
            alert('Nincs megjeleníthető kitelepítés a kiválasztott szűrőkkel.');
            return;
        }

        // Rendezzük a dátumokat növekvő sorrendben
        allDeployments.sort((a, b) => a.date - b.date);

        // Meghatározzuk a legkorábbi és legkésőbbi dátumot
        const firstDate = allDeployments[0].date;
        const lastDate = allDeployments[allDeployments.length - 1].date;

        // Hozzáadunk egy kis margót az időtartományhoz
        const timeRange = lastDate - firstDate;
        const margin = timeRange * 0.05; // 5% margó mindkét oldalon

        const startDate = new Date(firstDate.getTime() - margin);
        const endDate = new Date(lastDate.getTime() + margin);

        // Frissítjük a dátum input mezőket
        const startDateInput = document.getElementById('timelineStartDate');
        const endDateInput = document.getElementById('timelineEndDate');

        startDateInput.value = startDate.toISOString().split('T')[0];
        endDateInput.value = endDate.toISOString().split('T')[0];

        // Meghatározzuk a megfelelő zoom szintet az időtartam alapján
        let zoom = 'month';

        if (timeRange <= 2 * 24 * 60 * 60 * 1000) {
            zoom = 'day';
        } else if (timeRange <= 14 * 24 * 60 * 60 * 1000) {
            zoom = 'week';
        } else if (timeRange <= 180 * 24 * 60 * 60 * 1000) {
            zoom = 'month';
        } else {
            zoom = 'year';
        }

        // Frissítjük az aktív zoom gombot
        const zoomButtons = document.querySelectorAll('.timeline-zoom button');
        zoomButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.getAttribute('data-zoom') === zoom) {
                btn.classList.add('active');
            }
        });

        // Beállítjuk a nagyítást az időtartam és a pontok száma alapján
        const scaleSlider = document.getElementById('timelineScale');

        // Alapértelmezetten nagyobb nagyítást használunk
        if (allDeployments.length < 10) {
            scaleSlider.value = 20;
        } else if (allDeployments.length < 30) {
            scaleSlider.value = 15;
        } else {
            scaleSlider.value = 10;
        }

        // Beállítjuk az időtartományt és újrarajzoljuk az idővonalat
        currentTimelineStart = startDate;
        currentTimelineEnd = endDate;
        currentZoom = zoom;
        currentScale = parseInt(scaleSlider.value);

        renderTimelineWithDates(startDate, endDate, currentScale);
    }

    function navigateTimeline(direction) {
        if (!currentTimelineStart || !currentTimelineEnd) return;

        const timeRange = currentTimelineEnd - currentTimelineStart;
        let newStart, newEnd;

        if (direction === 'prev') {
            newStart = new Date(currentTimelineStart - timeRange);
            newEnd = new Date(currentTimelineStart);
        } else {
            newStart = new Date(currentTimelineEnd);
            newEnd = new Date(currentTimelineEnd + timeRange);
        }

        // Frissítjük a dátum input mezőket
        const startDateInput = document.getElementById('timelineStartDate');
        const endDateInput = document.getElementById('timelineEndDate');

        startDateInput.value = newStart.toISOString().split('T')[0];
        endDateInput.value = newEnd.toISOString().split('T')[0];

        currentTimelineStart = newStart;
        currentTimelineEnd = newEnd;

        renderTimelineWithDates(newStart, newEnd, currentScale);
    }

    function navigateToComment(commentId) {
        // Aktiváljuk a kommentek fület, ha még nincs aktiválva
        const commentsTab = document.querySelector('#comment-tabpanel');
        if (commentsTab && !commentsTab.classList.contains('active-tab')) {
            commentsTab.querySelector('a').click();
            // Várunk egy kicsit, hogy a kommentek betöltődjenek
            setTimeout(() => {
                scrollToComment(commentId);
            }, 500);
        } else {
            scrollToComment(commentId);
        }
    }

    function scrollToComment(commentId) {
        const commentElement = document.getElementById(commentId);
        if (commentElement) {
            // Kiemeljük a kommentet
            commentElement.style.transition = 'background-color 0.5s';
            commentElement.style.backgroundColor = '#ffffc0';

            // Odagörgetünk a kommenthez
            commentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

            // Visszaállítjuk az eredeti háttérszínt
            setTimeout(() => {
                commentElement.style.backgroundColor = '';
            }, 3000);
        }
    }

    function renderTimeline(deployments, zoomLevel, scale) {
        currentZoom = zoomLevel;
        currentScale = scale || 10;

        // Összegyűjtjük az összes dátumot minden környezetből
        let allDeployments = [];
        deployments.forEach(({env, dates, commentIds}) => {
            dates.forEach((date, index) => {
                allDeployments.push({
                    env: env,
                    date: new Date(date),
                    commentId: commentIds[index]
                });
            });
        });

        // Szűrjük a környezeteket a kiválasztott szűrők alapján
        const filterCheckboxes = document.querySelectorAll('.timeline-filter-checkbox');
        const enabledEnvironments = Array.from(filterCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.getAttribute('data-env'));

        allDeployments = allDeployments.filter(deployment =>
            enabledEnvironments.includes(deployment.env)
        );

        // Rendezzük a dátumokat növekvő sorrendben
        allDeployments.sort((a, b) => a.date - b.date);

        if (allDeployments.length === 0) {
            const container = document.getElementById('timelineContainer');
            container.innerHTML = '<p>Nincs megjeleníthető kitelepítés.</p>';
            return;
        }

        // Meghatározzuk az idővonal kezdő és végpontját
        const firstDate = allDeployments[0].date;
        const lastDate = allDeployments[allDeployments.length - 1].date;

        // Kiszámoljuk az időtartamot a zoom szint alapján
        let timeRange;

        switch (zoomLevel) {
            case 'day':
                timeRange = 24 * 60 * 60 * 1000; // 1 nap milliszekundumban
                break;
            case 'week':
                timeRange = 7 * 24 * 60 * 60 * 1000; // 1 hét milliszekundumban
                break;
            case 'month':
                timeRange = 30 * 24 * 60 * 60 * 1000; // ~1 hónap milliszekundumban
                break;
            case 'year':
                timeRange = 365 * 24 * 60 * 60 * 1000; // ~1 év milliszekundumban
                break;
            case 'all':
            default:
                timeRange = lastDate - firstDate;
                break;
        }

        // Ha a zoom nem "all", akkor a legutolsó dátumtól számítjuk vissza az időtartamot
        let startDate, endDate;

        if (zoomLevel === 'all') {
            startDate = new Date(firstDate);
            endDate = new Date(lastDate);
        } else {
            endDate = new Date(lastDate);
            startDate = new Date(endDate - timeRange);
        }

        // Frissítjük a dátum input mezőket
        const startDateInput = document.getElementById('timelineStartDate');
        const endDateInput = document.getElementById('timelineEndDate');

        startDateInput.value = startDate.toISOString().split('T')[0];
        endDateInput.value = endDate.toISOString().split('T')[0];

        currentTimelineStart = startDate;
        currentTimelineEnd = endDate;

        renderTimelineWithDates(startDate, endDate, scale);
    }

    function renderTimelineWithDates(startDate, endDate, scale) {
        const container = document.getElementById('timelineContainer');
        const inner = document.getElementById('timelineInner');
        const tooltip = document.getElementById('timelineTooltip');
        const dateMarkers = document.getElementById('timelineDateMarkers');

        // Töröljük a korábbi idővonal elemeket
        const existingItems = inner.querySelectorAll('.timeline-item, .timeline-cluster');
        existingItems.forEach(item => item.remove());

        // Töröljük a korábbi dátum markereket
        while (dateMarkers.firstChild) {
            dateMarkers.removeChild(dateMarkers.firstChild);
        }

        // Összegyűjtjük az összes dátumot minden környezetből
        let allDeployments = [];
        const deployments = processComments(getCommentsWithoutActivation());

        deployments.forEach(({env, dates, commentIds}) => {
            dates.forEach((date, index) => {
                allDeployments.push({
                    env: env,
                    date: new Date(date),
                    commentId: commentIds[index]
                });
            });
        });

        // Szűrjük a környezeteket a kiválasztott szűrők alapján
        const filterCheckboxes = document.querySelectorAll('.timeline-filter-checkbox');
        const enabledEnvironments = Array.from(filterCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.getAttribute('data-env'));

        allDeployments = allDeployments.filter(deployment =>
            enabledEnvironments.includes(deployment.env)
        );

        // Szűrjük a kiválasztott időtartományra
        allDeployments = allDeployments.filter(deployment =>
            deployment.date >= startDate && deployment.date <= endDate
        );

        // Rendezzük a dátumokat növekvő sorrendben
        allDeployments.sort((a, b) => a.date - b.date);

        if (allDeployments.length === 0) {
            const message = document.createElement('p');
            message.style.textAlign = 'center';
            message.style.marginTop = '50px';
            message.textContent = 'Nincs megjeleníthető kitelepítés ebben az időszakban.';

            inner.innerHTML = '';
            inner.appendChild(message);
            return;
        }

        // Beállítjuk az idővonal szélességét a nagyítás alapján
        const baseWidth = container.clientWidth;
        // Exponenciális nagyítás a jobb skálázáshoz
        const scaledWidth = baseWidth * Math.pow(1.2, scale - 1);
        inner.style.width = `${scaledWidth}px`;

        // Nagyobb nagyításnál speciális osztály hozzáadása a jobb olvashatóságért
        if (scale >= 15) {
            inner.classList.add('high-zoom');
        } else {
            inner.classList.remove('high-zoom');
        }

        // Időtartam milliszekundumban
        const timeRange = endDate - startDate;

        // Dátum markerek hozzáadása
        addDateMarkers(startDate, endDate, dateMarkers, scaledWidth);

        // Klaszterezési küszöbérték a nagyítás alapján
        // Minél nagyobb a nagyítás, annál kisebb a küszöbérték (kevesebb klaszterezés)
        // A scale 1-30 között van, ahol 30 a legnagyobb nagyítás
        const baseClusterThreshold = timeRange / scaledWidth * 20; // 20 pixel távolságon belüli pontok klaszterezése alapértelmezetten

        // Exponenciális csökkenés a klaszterezési küszöbértékben a nagyítás növekedésével
        const clusterThreshold = baseClusterThreshold * Math.pow(0.85, scale - 1);

        // Ha a nagyítás elég nagy (15 felett), akkor egyáltalán nem klaszterezünk
        if (scale >= 15) {
            // Egyedi pontok megjelenítése klaszterezés nélkül
            allDeployments.forEach(deployment => {
                addTimelineItem(deployment, startDate, endDate, scaledWidth, inner, tooltip);
            });
        } else {
            // Klaszterezés a beállított küszöbérték alapján
            const clusters = clusterDeployments(allDeployments, startDate, endDate, scaledWidth, clusterThreshold);

            // Klaszterek és egyedi pontok megjelenítése
            clusters.forEach(cluster => {
                if (cluster.items.length === 1) {
                    // Egyedi pont
                    const deployment = cluster.items[0];
                    addTimelineItem(deployment, startDate, endDate, scaledWidth, inner, tooltip);
                } else {
                    // Klaszter
                    addTimelineCluster(cluster, startDate, endDate, scaledWidth, inner, tooltip);
                }
            });
        }
    }

    function addDateMarkers(startDate, endDate, container, width) {
        const timeRange = endDate - startDate;

        // Meghatározzuk a marker típusát az időtartam alapján
        let markerInterval, formatFunc;

        if (timeRange <= 24 * 60 * 60 * 1000) {
            // Napi nézet: óránként
            markerInterval = 60 * 60 * 1000; // 1 óra
            formatFunc = date => `${String(date.getHours()).padStart(2, '0')}:00`;
        } else if (timeRange <= 7 * 24 * 60 * 60 * 1000) {
            // Heti nézet: naponként
            markerInterval = 24 * 60 * 60 * 1000; // 1 nap
            formatFunc = date => `${date.getMonth() + 1}.${date.getDate()}.`;
        } else if (timeRange <= 31 * 24 * 60 * 60 * 1000) {
            // Havi nézet: 3 naponként
            markerInterval = 3 * 24 * 60 * 60 * 1000; // 3 nap
            formatFunc = date => `${date.getMonth() + 1}.${date.getDate()}.`;
        } else if (timeRange <= 365 * 24 * 60 * 60 * 1000) {
            // Éves nézet: havonként
            markerInterval = 30 * 24 * 60 * 60 * 1000; // ~1 hónap
            formatFunc = date => {
                const monthNames = ['Jan', 'Feb', 'Már', 'Ápr', 'Máj', 'Jún', 'Júl', 'Aug', 'Szep', 'Okt', 'Nov', 'Dec'];
                return monthNames[date.getMonth()];
            };
        } else {
            // Több éves nézet: negyedévenként
            markerInterval = 3 * 30 * 24 * 60 * 60 * 1000; // ~3 hónap
            formatFunc = date => {
                const quarter = Math.floor(date.getMonth() / 3) + 1;
                return `${date.getFullYear()} Q${quarter}`;
            };
        }

        // Markerek hozzáadása
        let currentDate = new Date(startDate);
        while (currentDate <= endDate) {
            const position = ((currentDate - startDate) / timeRange) * width;

            const marker = document.createElement('div');
            marker.className = 'timeline-date-marker';
            marker.style.left = `${position}px`;
            marker.textContent = formatFunc(currentDate);

            container.appendChild(marker);

            // Következő marker időpontja
            currentDate = new Date(currentDate.getTime() + markerInterval);
        }
    }

    function clusterDeployments(deployments, startDate, endDate, width, threshold) {
        if (deployments.length === 0) return [];

        const timeRange = endDate - startDate;
        const clusters = [];
        let currentCluster = null;

        // Rendezzük a telepítéseket időrend szerint
        deployments.sort((a, b) => a.date - b.date);

        deployments.forEach(deployment => {
            const position = ((deployment.date - startDate) / timeRange) * width;

            if (!currentCluster) {
                // Új klaszter létrehozása
                currentCluster = {
                    position: position,
                    items: [deployment]
                };
            } else {
                const lastPosition = currentCluster.position;

                if (Math.abs(position - lastPosition) <= threshold) {
                    // Hozzáadjuk a meglévő klaszterhez
                    currentCluster.items.push(deployment);
                    // Frissítjük a klaszter pozícióját (átlag)
                    currentCluster.position = (lastPosition * (currentCluster.items.length - 1) + position) / currentCluster.items.length;
                } else {
                    // Lezárjuk a jelenlegi klasztert és újat kezdünk
                    clusters.push(currentCluster);
                    currentCluster = {
                        position: position,
                        items: [deployment]
                    };
                }
            }
        });

        // Az utolsó klasztert is hozzáadjuk
        if (currentCluster) {
            clusters.push(currentCluster);
        }

        return clusters;
    }

    function addTimelineItem(deployment, startDate, endDate, width, container, tooltip) {
        const timeRange = endDate - startDate;
        const position = ((deployment.date - startDate) / timeRange) * width;

        const item = document.createElement('div');
        item.className = 'timeline-item';
        item.style.left = `${position}px`;
        item.style.top = '0';
        item.setAttribute('data-comment-id', deployment.commentId);
        item.setAttribute('data-date', deployment.date.toISOString());
        item.setAttribute('data-env', deployment.env);

        const dot = document.createElement('div');
        dot.className = 'timeline-dot';
        dot.style.backgroundColor = environmentColors[deployment.env];

        const label = document.createElement('div');
        label.className = 'timeline-label';

        const envDiv = document.createElement('div');
        envDiv.className = 'timeline-env';
        envDiv.textContent = deployment.env;

        const dateDiv = document.createElement('div');
        dateDiv.className = 'timeline-date';
        dateDiv.textContent = formatShortDate(deployment.date);

        label.appendChild(envDiv);
        label.appendChild(dateDiv);

        item.appendChild(dot);
        item.appendChild(label);
        container.appendChild(item);

        // Eseménykezelők az idővonal elemekhez
        item.addEventListener('click', function() {
            const commentId = this.getAttribute('data-comment-id');
            if (commentId) {
                navigateToComment(commentId);
            }
        });

        // Tooltip megjelenítése hover esetén
        item.addEventListener('mouseenter', function(e) {
            const env = this.getAttribute('data-env');
            const date = new Date(this.getAttribute('data-date'));

            tooltip.innerHTML = `
                <strong>${env}</strong><br>
                ${formatFullDate(date)}
            `;

            const rect = container.getBoundingClientRect();
            tooltip.style.left = `${e.clientX - rect.left}px`;
            tooltip.style.top = `${e.clientY - rect.top - 40}px`;
            tooltip.style.opacity = '1';
        });

        item.addEventListener('mouseleave', function() {
            tooltip.style.opacity = '0';
        });
    }

    function addTimelineCluster(cluster, startDate, endDate, width, container, tooltip) {
        const timeRange = endDate - startDate;
        const position = cluster.position;

        const clusterElement = document.createElement('div');
        clusterElement.className = 'timeline-cluster';
        clusterElement.style.left = `${position}px`;
        clusterElement.style.top = '0';

        const dot = document.createElement('div');
        dot.className = 'timeline-cluster-dot';
        dot.textContent = cluster.items.length;

        const popup = document.createElement('div');
        popup.className = 'timeline-cluster-popup';

        // Rendezzük a klaszter elemeit időrend szerint (legújabb elöl)
        cluster.items.sort((a, b) => b.date - a.date);

        cluster.items.forEach(deployment => {
            const item = document.createElement('div');
            item.className = 'cluster-item';
            item.setAttribute('data-comment-id', deployment.commentId);

            const itemDot = document.createElement('div');
            itemDot.className = 'cluster-dot';
            itemDot.style.backgroundColor = environmentColors[deployment.env];

            const itemContent = document.createElement('div');

            const envSpan = document.createElement('span');
            envSpan.className = 'cluster-env';
            envSpan.textContent = deployment.env;

            const dateSpan = document.createElement('span');
            dateSpan.className = 'cluster-date';
            dateSpan.textContent = formatFullDate(deployment.date);

            itemContent.appendChild(envSpan);
            itemContent.appendChild(dateSpan);

            item.appendChild(itemDot);
            item.appendChild(itemContent);
            popup.appendChild(item);

            // Kattintás eseménykezelő
            item.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');
                if (commentId) {
                    navigateToComment(commentId);
                }
            });
        });

        clusterElement.appendChild(dot);
        clusterElement.appendChild(popup);
        container.appendChild(clusterElement);

        // Tooltip megjelenítése hover esetén
        clusterElement.addEventListener('mouseenter', function(e) {
            tooltip.innerHTML = `<strong>${cluster.items.length} kitelepítés</strong>`;

            const rect = container.getBoundingClientRect();
            tooltip.style.left = `${e.clientX - rect.left}px`;
            tooltip.style.top = `${e.clientY - rect.top - 40}px`;
            tooltip.style.opacity = '1';
        });

        clusterElement.addEventListener('mouseleave', function() {
            tooltip.style.opacity = '0';
        });
    }

    function processComments(comments) {
        const deployments = Object.fromEntries(
            environmentOrder.map(env => [env, { deployed: false, dates: [], commentIds: [] }])
        );

        comments.forEach(comment => {
            const commentText = comment.querySelector('.action-body').textContent.trim();
            const commentId = comment.id;

            // Ellenőrizzük az összes környezetet
            for (const [env, pattern] of Object.entries(environmentPatterns)) {
                if (commentText.includes(pattern)) {
                    const dateElement = comment.querySelector('.action-details .date');
                    const date = dateElement ? dateElement.getAttribute('title') : 'Ismeretlen dátum';
                    deployments[env].deployed = true;
                    deployments[env].dates.push(date);
                    deployments[env].commentIds.push(commentId);
                }
            }
        });

        // Dátumok rendezése minden környezetnél (legújabb elöl)
        Object.values(deployments).forEach(env => {
            // Párhuzamosan rendezzük a dátumokat és a komment ID-kat
            const combined = env.dates.map((date, i) => ({ date, commentId: env.commentIds[i] }));
            combined.sort((a, b) => new Date(b.date) - new Date(a.date));

            env.dates = combined.map(item => item.date);
            env.commentIds = combined.map(item => item.commentId);
        });

        return environmentOrder.map(env => ({
            env: env,
            deployed: deployments[env].deployed,
            dates: deployments[env].dates,
            commentIds: deployments[env].commentIds
        }));
    }

    function insertDeploymentSection(deployments) {
        const timeTrackingModule = document.getElementById('timetrackingmodule');
        if (!timeTrackingModule) {
            console.log('Time Tracking module not found, retrying...');
            setTimeout(() => insertDeploymentSection(deployments), 500);
            return;
        }

        const existingDeploymentModule = document.getElementById('deploymentModule');
        if (existingDeploymentModule) {
            existingDeploymentModule.remove();
        }

        const newSection = createDeploymentSection(deployments);
        timeTrackingModule.parentNode.insertBefore(newSection, timeTrackingModule);
    }

    function getCommentsWithoutActivation() {
        return document.querySelectorAll('.issue-data-block.activity-comment');
    }

    function activateCommentsTab() {
        const commentsTab = document.querySelector('#comment-tabpanel');
        if (commentsTab && !commentsTab.classList.contains('active-tab')) {
            commentsTab.querySelector('a').click();
            return true;
        }
        return false;
    }

    function main() {
        let comments = getCommentsWithoutActivation();

        if (comments.length === 0) {
            if (activateCommentsTab()) {
                setTimeout(main, 1000); // Várunk 1 másodpercet a fül aktiválása után
                return;
            } else {
                console.log('Nem sikerült aktiválni a Comments fület');
                return;
            }
        }

        const deployments = processComments(comments);
        insertDeploymentSection(deployments);
    }

    // Várunk 5 másodpercet, mielőtt elindítjuk a szkriptet
    setTimeout(main, 5000);
})();
