// ==UserScript==
// @name         IIER2 Automatikus esem√©nyt√≠pus felv√©tel
// @namespace    http://tampermonkey.net/
// @version      3.0
// @description  Automatikusan felveszi az √∂sszes esem√©nyt√≠pust a megadott √©rt√©kekkel az IIER2 rendszerben - Dinamikus ID felder√≠t√©ssel
// @author       You
// @match        http://iier2-konfig.alig.hu:8080/xhtml/jogcimkezeles/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // St√≠lusok a gombokhoz √©s a st√°tusz panelhez
    const style = document.createElement('style');
    style.textContent = `
        .auto-fill-button {
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 10000;
            padding: 10px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }
        .auto-fill-button:hover {
            background-color: #45a049;
        }
        .stop-button {
            position: fixed;
            top: 10px;
            right: 190px;
            z-index: 10000;
            padding: 10px 15px;
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            display: none;
        }
        .stop-button:hover {
            background-color: #d32f2f;
        }
        .auto-fill-status {
            position: fixed;
            top: 50px;
            right: 10px;
            z-index: 10000;
            padding: 5px 10px;
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
            max-width: 400px;
            max-height: 400px;
            overflow-y: auto;
        }
    `;
    document.head.appendChild(style);

    // Gombok l√©trehoz√°sa
    const startButton = document.createElement('button');
    startButton.textContent = '√ñsszes esem√©nyt√≠pus felv√©tele';
    startButton.className = 'auto-fill-button';
    document.body.appendChild(startButton);

    const stopButton = document.createElement('button');
    stopButton.textContent = 'Folyamat le√°ll√≠t√°sa';
    stopButton.className = 'stop-button';
    document.body.appendChild(stopButton);

    // Diagnosztikai gomb
    const diagButton = document.createElement('button');
    diagButton.textContent = 'Diagnosztika';
    diagButton.className = 'auto-fill-button';
    diagButton.style.top = '10px';
    diagButton.style.right = '350px';
    diagButton.style.backgroundColor = '#2196F3';
    document.body.appendChild(diagButton);

    // St√°tusz panel l√©trehoz√°sa
    const statusPanel = document.createElement('div');
    statusPanel.className = 'auto-fill-status';
    statusPanel.style.display = 'none';
    document.body.appendChild(statusPanel);

    // Glob√°lis v√°ltoz√≥k
    let isProcessRunning = false;
    let shouldStop = false;
    let currentEventTypeIndex = 0;
    let processedEventTypes = [];
    let timeoutIds = []; // Az √∂sszes id≈ëz√≠t≈ë t√°rol√°sa

    // Konstansok a kit√∂ltend≈ë mez≈ëkh√∂z - most dinamikusan felder√≠tj√ºk ≈ëket
    const FIELDS_CONFIG = {
        // Dinamikusan felder√≠tett ID-k lesznek itt t√°rolva
        eventTypeSelectId: null,
        eventTypeSelectInputId: null,
        textInputs: [
            {
                id: null,
                hiddenId: null,
                value: '10',
                label: '√öjrapr√≥b√°lkoz√°sok sz√°ma',
                pattern: 'retryCount'
            },
            {
                id: null,
                hiddenId: null,
                value: '600',
                label: '√öjrapr√≥b√°lkoz√°sok k√∂zti id≈ë',
                pattern: 'retryInterval'
            },
            {
                id: null,
                hiddenId: null,
                value: '50',
                label: 'Priorit√°s',
                pattern: 'priority_input'
            },
            {
                id: null,
                hiddenId: null,
                value: '900',
                label: 'Fut√°sok maxim√°lis ideje',
                pattern: 'threadTimeout'
            }
        ],
        dropdowns: [
            {
                id: null,
                value: 'NORMAL',
                label: 'Priorit√°s kateg√≥ria',
                pattern: 'priorityCategory'
            },
            {
                id: null,
                value: 'GINOP_TELJES',
                label: 'Domain',
                pattern: 'nodeDomain'
            }
        ],
        buttons: {
            save: null,
            newEntry: null
        },
        loadingPopup: {
            className: 'ui-dialog-content ui-widget-content',
            textContent: 'T√ºrelmet k√©r√ºnk'
        }
    };

    // Gomb esem√©nykezel≈ëk
    startButton.addEventListener('click', startAutomatedProcess);
    stopButton.addEventListener('click', stopAutomatedProcess);
    diagButton.addEventListener('click', runDiagnostics);

    // Dinamikus ID felder√≠t≈ë f√ºggv√©nyek
    function discoverElementIds() {
        updateStatus('üîç Elemek felder√≠t√©se...');
        
        let discoveryReport = '<strong>üîç ELEMEK FELDER√çT√âSE</strong><br><br>';
        let allFound = true;
        
        // 1. Esem√©nyt√≠pus select elem felder√≠t√©se
        discoveryReport += '<strong>1. Esem√©nyt√≠pus select elem:</strong><br>';
        const eventTypeSelect = discoverEventTypeSelect();
        if (eventTypeSelect.found) {
            FIELDS_CONFIG.eventTypeSelectId = eventTypeSelect.selectId;
            FIELDS_CONFIG.eventTypeSelectInputId = eventTypeSelect.inputId;
            discoveryReport += `‚úÖ Select ID: ${eventTypeSelect.selectId}<br>`;
            discoveryReport += `‚úÖ Input ID: ${eventTypeSelect.inputId}<br>`;
        } else {
            discoveryReport += `‚ùå Nem tal√°lhat√≥ esem√©nyt√≠pus select elem<br>`;
            allFound = false;
        }
        
        // 2. Sz√∂veges input mez≈ëk felder√≠t√©se
        discoveryReport += '<br><strong>2. Sz√∂veges input mez≈ëk:</strong><br>';
        for (const field of FIELDS_CONFIG.textInputs) {
            const inputIds = discoverTextInput(field.pattern);
            if (inputIds.found) {
                field.id = inputIds.id;
                field.hiddenId = inputIds.hiddenId;
                discoveryReport += `‚úÖ ${field.label}: ${inputIds.id}<br>`;
                if (inputIds.hiddenId) {
                    discoveryReport += `   Hidden: ${inputIds.hiddenId}<br>`;
                }
            } else {
                discoveryReport += `‚ùå ${field.label} (${field.pattern}) nem tal√°lhat√≥<br>`;
                allFound = false;
            }
        }
        
        // 3. Leg√∂rd√ºl≈ë men√ºk felder√≠t√©se
        discoveryReport += '<br><strong>3. Leg√∂rd√ºl≈ë men√ºk:</strong><br>';
        for (const field of FIELDS_CONFIG.dropdowns) {
            const dropdownId = discoverDropdown(field.pattern);
            if (dropdownId.found) {
                field.id = dropdownId.id;
                discoveryReport += `‚úÖ ${field.label}: ${dropdownId.id}<br>`;
            } else {
                discoveryReport += `‚ùå ${field.label} (${field.pattern}) nem tal√°lhat√≥<br>`;
                allFound = false;
            }
        }
        
        // 4. Gombok felder√≠t√©se
        discoveryReport += '<br><strong>4. Gombok:</strong><br>';
        const buttons = discoverButtons();
        if (buttons.save) {
            FIELDS_CONFIG.buttons.save = buttons.save;
            discoveryReport += `‚úÖ Ment√©s gomb: ${buttons.save}<br>`;
        } else {
            discoveryReport += `‚ùå Ment√©s gomb nem tal√°lhat√≥<br>`;
            allFound = false;
        }
        
        if (buttons.newEntry) {
            FIELDS_CONFIG.buttons.newEntry = buttons.newEntry;
            discoveryReport += `‚úÖ √öj felvitel gomb: ${buttons.newEntry}<br>`;
        } else {
            discoveryReport += `‚ùå √öj felvitel gomb nem tal√°lhat√≥<br>`;
            allFound = false;
        }
        
        discoveryReport += `<br><strong>${allFound ? '‚úÖ Minden elem sikeresen felder√≠tve!' : '‚ùå Nem minden elem tal√°lhat√≥!'}</strong>`;
        
        updateStatus(discoveryReport, !allFound);
        console.log('=== ELEMEK FELDER√çT√âSE ===');
        console.log(discoveryReport.replace(/<br>/g, '\n').replace(/<[^>]*>/g, ''));
        
        return allFound;
    }
    
    function discoverEventTypeSelect() {
        // Keress√ºk az asyncEventType select elemet
        const selects = document.querySelectorAll('select[id*="asyncEventType"]');
        for (const select of selects) {
            if (select.id.includes('_input_input')) {
                const baseId = select.id.replace('_input_input', '_input');
                return {
                    found: true,
                    selectId: baseId,
                    inputId: select.id
                };
            }
        }
        
        // Alternat√≠v keres√©s
        const allSelects = document.querySelectorAll('select');
        for (const select of allSelects) {
            if (select.id.includes('EventType') && select.options.length > 1) {
                const baseId = select.id.replace('_input_input', '_input');
                return {
                    found: true,
                    selectId: baseId,
                    inputId: select.id
                };
            }
        }
        
        return { found: false };
    }
    
    function discoverTextInput(pattern) {
        // Keress√ºk a minta alapj√°n az input elemeket
        const inputs = document.querySelectorAll(`input[id*="${pattern}"]`);
        
        for (const input of inputs) {
            if (input.id.includes('_input_input') && input.type === 'text') {
                const hiddenId = input.id.replace('_input_input', '_input_hinput');
                const hiddenElement = document.getElementById(hiddenId);
                
                return {
                    found: true,
                    id: input.id,
                    hiddenId: hiddenElement ? hiddenId : null
                };
            }
        }
        
        return { found: false };
    }
    
    function discoverDropdown(pattern) {
        // Keress√ºk a minta alapj√°n a select elemeket
        const selects = document.querySelectorAll(`select[id*="${pattern}"]`);
        
        for (const select of selects) {
            if (select.id.includes('_input_input')) {
                return {
                    found: true,
                    id: select.id
                };
            }
        }
        
        return { found: false };
    }
    
    function discoverButtons() {
        let saveButton = null;
        let newEntryButton = null;
        
        // Ment√©s gomb keres√©se - √°ltal√°ban _save v√©gz≈ëd√©s≈± ID
        const allButtons = document.querySelectorAll('button, input[type="button"], input[type="submit"]');
        
        for (const button of allButtons) {
            // Ment√©s gomb
            if (button.id && button.id.includes('_save')) {
                saveButton = button.id;
            }
            
            // √öj felvitel gomb - √°ltal√°ban j_id-val kezd≈ëdik √©s gomb sz√∂vege alapj√°n
            if (button.id && button.id.includes('j_id') && 
                (button.textContent.includes('√öj') || button.textContent.includes('Hozz√°ad√°s') || 
                 button.getAttribute('title')?.includes('√öj') || button.getAttribute('value')?.includes('√öj'))) {
                newEntryButton = button.id;
            }
        }
        
        // Ha nem tal√°ltunk ment√©s gombot, keress√ºk a form alapj√°n
        if (!saveButton) {
            const forms = document.querySelectorAll('form');
            for (const form of forms) {
                if (form.id && form.id.includes('j_idt')) {
                    const formBaseId = form.id.replace(/(:.*)?$/, '');
                    const potentialSaveId = formBaseId + '_save';
                    if (document.getElementById(potentialSaveId)) {
                        saveButton = potentialSaveId;
                        break;
                    }
                }
            }
        }
        
        return {
            save: saveButton,
            newEntry: newEntryButton
        };
    }
    
    // Diagnosztikai f√ºggv√©ny
    function runDiagnostics() {
        statusPanel.style.display = 'block';
        statusPanel.style.backgroundColor = '#e3f2fd';
        statusPanel.style.borderColor = '#bbdefb';
        
        let diagnosticInfo = '<strong>üîç DIAGNOSZTIKAI JELENT√âS</strong><br><br>';
        
        // El≈ësz√∂r dinamikus felder√≠t√©s
        updateStatus('Dinamikus felder√≠t√©s futtat√°sa...');
        const allElementsFound = discoverElementIds();
        
        // 1. Dinamikus felder√≠t√©s eredm√©nye
        diagnosticInfo += '<strong>1. Dinamikus felder√≠t√©s eredm√©nye:</strong><br>';
        diagnosticInfo += `‚Ä¢ √ñsszes elem megtal√°lva: ${allElementsFound ? '‚úÖ IGEN' : '‚ùå NEM'}<br>`;
        diagnosticInfo += `‚Ä¢ Esem√©nyt√≠pus select: ${FIELDS_CONFIG.eventTypeSelectId ? '‚úÖ ' + FIELDS_CONFIG.eventTypeSelectId : '‚ùå HI√ÅNYZIK'}<br>`;
        diagnosticInfo += `‚Ä¢ Esem√©nyt√≠pus input: ${FIELDS_CONFIG.eventTypeSelectInputId ? '‚úÖ ' + FIELDS_CONFIG.eventTypeSelectInputId : '‚ùå HI√ÅNYZIK'}<br><br>`;
        
        // 2. Sz√∂veges mez≈ëk
        diagnosticInfo += '<strong>2. Sz√∂veges mez≈ëk:</strong><br>';
        for (const field of FIELDS_CONFIG.textInputs) {
            diagnosticInfo += `‚Ä¢ ${field.label}: ${field.id ? '‚úÖ ' + field.id : '‚ùå HI√ÅNYZIK'}<br>`;
        }
        
        // 3. Leg√∂rd√ºl≈ë men√ºk
        diagnosticInfo += '<br><strong>3. Leg√∂rd√ºl≈ë men√ºk:</strong><br>';
        for (const field of FIELDS_CONFIG.dropdowns) {
            diagnosticInfo += `‚Ä¢ ${field.label}: ${field.id ? '‚úÖ ' + field.id : '‚ùå HI√ÅNYZIK'}<br>`;
        }
        
        // 4. Gombok
        diagnosticInfo += '<br><strong>4. Gombok:</strong><br>';
        diagnosticInfo += `‚Ä¢ Ment√©s gomb: ${FIELDS_CONFIG.buttons.save ? '‚úÖ ' + FIELDS_CONFIG.buttons.save : '‚ùå HI√ÅNYZIK'}<br>`;
        diagnosticInfo += `‚Ä¢ √öj felvitel gomb: ${FIELDS_CONFIG.buttons.newEntry ? '‚úÖ ' + FIELDS_CONFIG.buttons.newEntry : '‚ùå HI√ÅNYZIK'}<br>`;
        
        // 5. T√°bl√°zat elemz√©se
        diagnosticInfo += '<br><strong>5. T√°bl√°zat elemz√©se:</strong><br>';
        const tableRows = document.querySelectorAll('tr[data-ri]');
        diagnosticInfo += `‚Ä¢ Tal√°lt t√°bl√°zat sorok: ${tableRows.length}<br>`;
        
        if (tableRows.length > 0) {
            const firstRow = tableRows[0];
            const cells = firstRow.querySelectorAll('td');
            diagnosticInfo += `‚Ä¢ Els≈ë sor cell√°k sz√°ma: ${cells.length}<br>`;
            cells.forEach((cell, index) => {
                const content = cell.textContent.trim();
                diagnosticInfo += `  ${index + 1}. cella: "${content.substring(0, 50)}${content.length > 50 ? '...' : ''}"<br>`;
            });
        }
        
        // 6. Esem√©nyt√≠pusok lek√©r√©se teszt
        diagnosticInfo += '<br><strong>6. Esem√©nyt√≠pusok lek√©r√©se teszt:</strong><br>';
        const eventTypes = getAvailableEventTypes();
        diagnosticInfo += `‚Ä¢ Tal√°lt esem√©nyt√≠pusok: ${eventTypes.length}<br>`;
        if (eventTypes.length > 0) {
            diagnosticInfo += `‚Ä¢ Els≈ë 10 esem√©nyt√≠pus:<br>`;
            eventTypes.slice(0, 10).forEach((type, index) => {
                diagnosticInfo += `  ${index + 1}. "${type}"<br>`;
            });
        }
        
        statusPanel.innerHTML = diagnosticInfo;
        console.log('=== DIAGNOSZTIKAI JELENT√âS ===');
        console.log(diagnosticInfo.replace(/<br>/g, '\n').replace(/<[^>]*>/g, ''));
    }

    // Saj√°t setTimeout f√ºggv√©ny, amely nyilv√°ntartja az id≈ëz√≠t≈ëket
    function safeSetTimeout(callback, delay) {
        const timeoutId = setTimeout(() => {
            // Ha a folyamat m√©g fut, akkor futtatjuk a callback-et
            if (isProcessRunning && !shouldStop) {
                callback();
            }
            // Elt√°vol√≠tjuk az id≈ëz√≠t≈ët a list√°b√≥l
            const index = timeoutIds.indexOf(timeoutId);
            if (index > -1) {
                timeoutIds.splice(index, 1);
            }
        }, delay);
        
        // Hozz√°adjuk az id≈ëz√≠t≈ët a list√°hoz
        timeoutIds.push(timeoutId);
        
        return timeoutId;
    }

    // Folyamat ind√≠t√°sa
    function startAutomatedProcess() {
        if (isProcessRunning) return;
        
        isProcessRunning = true;
        shouldStop = false;
        startButton.style.display = 'none';
        stopButton.style.display = 'block';
        statusPanel.style.display = 'block';
        
        updateStatus('Automatikus folyamat ind√≠t√°sa...');
        
        // El≈ësz√∂r felder√≠tj√ºk az elemeket dinamikusan
        const allElementsFound = discoverElementIds();
        
        if (!allElementsFound) {
            updateStatus('‚ùå Nem minden sz√ºks√©ges elem tal√°lhat√≥! A folyamat nem ind√≠that√≥ el.', true);
            endProcess();
            return;
        }
        
        // Esem√©nyt√≠pusok lek√©r√©se
        const eventTypes = getAvailableEventTypes();
        if (!eventTypes || eventTypes.length === 0) {
            updateStatus('Nem tal√°lhat√≥k esem√©nyt√≠pusok!', true);
            endProcess();
            return;
        }
        
        // M√°r felvett esem√©nyt√≠pusok ellen≈ërz√©se
        const existingEventTypes = getExistingEventTypes();
        updateStatus(`Tal√°lt esem√©nyt√≠pusok: ${eventTypes.length}<br>M√°r felvett esem√©nyt√≠pusok: ${existingEventTypes.length}`);
        
        // Kisz≈±rj√ºk a m√°r felvett esem√©nyt√≠pusokat
        const eventTypesToProcess = eventTypes.filter(type => !existingEventTypes.includes(type));
        
        if (eventTypesToProcess.length === 0) {
            updateStatus('Minden esem√©nyt√≠pus m√°r fel van v√©ve!');
            endProcess();
            return;
        }
        
        updateStatus(`Feldolgozand√≥ esem√©nyt√≠pusok: ${eventTypesToProcess.length}<br>${eventTypesToProcess.join(', ')}`);
        
        // Folyamat ind√≠t√°sa
        processedEventTypes = [];
        currentEventTypeIndex = 0;
        processNextEventType(eventTypesToProcess);
    }

    // Folyamat azonnali le√°ll√≠t√°sa
    function stopAutomatedProcess() {
        updateStatus('Folyamat azonnali le√°ll√≠t√°sa...');
        shouldStop = true;
        isProcessRunning = false;
        
        // Minden id≈ëz√≠t≈ë t√∂rl√©se
        timeoutIds.forEach(id => clearTimeout(id));
        timeoutIds = [];
        
        endProcess();
    }

    // Folyamat befejez√©se
    function endProcess() {
        isProcessRunning = false;
        startButton.style.display = 'block';
        stopButton.style.display = 'none';
        
        if (shouldStop) {
            updateStatus(`Folyamat le√°ll√≠tva. Feldolgozott esem√©nyt√≠pusok: ${processedEventTypes.length}<br>${processedEventTypes.join(', ')}`);
        } else {
            updateStatus(`Folyamat sikeresen befejezve. Feldolgozott esem√©nyt√≠pusok: ${processedEventTypes.length}<br>${processedEventTypes.join(', ')}`);
        }
        
        // 10 m√°sodperc m√∫lva elrejtj√ºk a st√°tusz panelt
        safeSetTimeout(() => {
            statusPanel.style.display = 'none';
        }, 10000);
    }

    // K√∂vetkez≈ë esem√©nyt√≠pus feldolgoz√°sa
    function processNextEventType(eventTypes) {
        if (shouldStop || !isProcessRunning || currentEventTypeIndex >= eventTypes.length) {
            endProcess();
            return;
        }
        
        const currentEventType = eventTypes[currentEventTypeIndex];
        updateStatus(`Feldolgoz√°s: ${currentEventType} (${currentEventTypeIndex + 1}/${eventTypes.length})`);
        
        // √öj felvitel gombra kattint√°s (ha nem az els≈ë elem)
        if (currentEventTypeIndex > 0) {
            clickNewEntryButton(() => {
                safeSetTimeout(() => {
                    fillEventType(currentEventType, eventTypes);
                }, 1000);
            });
        } else {
            fillEventType(currentEventType, eventTypes);
        }
    }

    // Esem√©nyt√≠pus kiv√°laszt√°sa √©s mez≈ëk kit√∂lt√©se
    function fillEventType(eventType, allEventTypes) {
        if (shouldStop || !isProcessRunning) {
            endProcess();
            return;
        }
        
        // Esem√©nyt√≠pus kiv√°laszt√°sa
        selectEventType(eventType, () => {
            // Sz√∂veges mez≈ëk kit√∂lt√©se
            fillTextInputs(0, () => {
                // Leg√∂rd√ºl≈ë men√ºk kit√∂lt√©se
                fillDropdowns(0, () => {
                    // Ellen≈ërz√©s
                    verifyAllFields(() => {
                        // Ment√©s
                        clickSaveButton(() => {
                            // K√∂vetkez≈ë esem√©nyt√≠pus
                            processedEventTypes.push(eventType);
                            currentEventTypeIndex++;
                            safeSetTimeout(() => {
                                processNextEventType(allEventTypes);
                            }, 1000);
                        });
                    });
                });
            });
        });
    }

    // Esem√©nyt√≠pus kiv√°laszt√°sa
    function selectEventType(eventType, callback) {
        if (shouldStop || !isProcessRunning) {
            endProcess();
            return;
        }
        
        try {
            const selectElement = document.getElementById(FIELDS_CONFIG.eventTypeSelectId);
            if (!selectElement) {
                updateStatus(`Esem√©nyt√≠pus leg√∂rd√ºl≈ë men√º nem tal√°lhat√≥!`, true);
                if (callback) callback();
                return;
            }
            
            updateStatus(`Esem√©nyt√≠pus kiv√°laszt√°sa: ${eventType}`);
            
            // Kattint√°s a leg√∂rd√ºl≈ë men√ºre
            selectElement.click();
            
            // V√°runk egy kicsit, hogy megjelenjen a leg√∂rd√ºl≈ë lista
            safeSetTimeout(() => {
                if (shouldStop || !isProcessRunning) {
                    endProcess();
                    return;
                }
                
                try {
                    // Keress√ºk meg a megfelel≈ë elemet a list√°ban
                    const items = document.querySelectorAll(`li[data-label="${eventType}"]`);
                    if (items.length > 0) {
                        // Kattint√°s az elemre
                        items[0].click();
                        
                        // Ellen≈ërizz√ºk, hogy a c√≠mke friss√ºlt-e
                        safeSetTimeout(() => {
                            if (shouldStop || !isProcessRunning) {
                                endProcess();
                                return;
                            }
                            
                            const label = document.getElementById(`${FIELDS_CONFIG.eventTypeSelectId}_label`);
                            if (label && label.textContent.trim() !== eventType) {
                                updateStatus(`Az esem√©nyt√≠pus c√≠mk√©je nem friss√ºlt. K√∂zvetlen be√°ll√≠t√°s...`, true);
                                
                                // K√∂zvetlen be√°ll√≠t√°s
                                if (label) {
                                    label.textContent = eventType;
                                }
                                
                                const hiddenSelect = document.getElementById(FIELDS_CONFIG.eventTypeSelectInputId);
                                if (hiddenSelect) {
                                    hiddenSelect.value = eventType;
                                    triggerEvent(hiddenSelect, 'change');
                                }
                            }
                            
                            if (callback) callback();
                        }, 300);
                    } else {
                        updateStatus(`Nem tal√°lhat√≥ elem a leg√∂rd√ºl≈ë men√ºben: ${eventType}`, true);
                        
                        // K√∂zvetlen be√°ll√≠t√°s
                        const hiddenSelect = document.getElementById(FIELDS_CONFIG.eventTypeSelectInputId);
                        if (hiddenSelect) {
                            hiddenSelect.value = eventType;
                            triggerEvent(hiddenSelect, 'change');
                        }
                        
                        const label = document.getElementById(`${FIELDS_CONFIG.eventTypeSelectId}_label`);
                        if (label) {
                            label.textContent = eventType;
                        }
                        
                        if (callback) callback();
                    }
                } catch (innerError) {
                    updateStatus(`Hiba az esem√©nyt√≠pus elem kiv√°laszt√°sa k√∂zben: ${innerError.message}`, true);
                    if (callback) callback();
                }
            }, 500);
        } catch (error) {
            updateStatus(`Hiba az esem√©nyt√≠pus kiv√°laszt√°sa k√∂zben: ${error.message}`, true);
            if (callback) callback();
        }
    }

    // Sz√∂veges mez≈ëk kit√∂lt√©se
    function fillTextInputs(index, callback) {
        if (shouldStop || !isProcessRunning || index >= FIELDS_CONFIG.textInputs.length) {
            if (shouldStop || !isProcessRunning) {
                endProcess();
                return;
            }
            
            // Ha minden sz√∂veges mez≈ë kit√∂ltve, folytatjuk
            if (callback) callback();
            return;
        }

        const field = FIELDS_CONFIG.textInputs[index];
        updateStatus(`${field.label} kit√∂lt√©se (${index + 1}/${FIELDS_CONFIG.textInputs.length})...`);
        
        // Sz√∂veges mez≈ë kit√∂lt√©se
        fillTextInput(field.id, field.hiddenId, field.value);
        
        // K√∂vetkez≈ë mez≈ë kit√∂lt√©se k√©sleltet√©ssel
        safeSetTimeout(() => {
            fillTextInputs(index + 1, callback);
        }, 300);
    }

    // Leg√∂rd√ºl≈ë men√ºk kit√∂lt√©se
    function fillDropdowns(index, callback) {
        if (shouldStop || !isProcessRunning || index >= FIELDS_CONFIG.dropdowns.length) {
            if (shouldStop || !isProcessRunning) {
                endProcess();
                return;
            }
            
            // Ha minden leg√∂rd√ºl≈ë men√º kit√∂ltve, folytatjuk
            if (callback) callback();
            return;
        }

        const field = FIELDS_CONFIG.dropdowns[index];
        updateStatus(`${field.label} kiv√°laszt√°sa (${index + 1}/${FIELDS_CONFIG.dropdowns.length})...`);
        
        // Leg√∂rd√ºl≈ë men√º kiv√°laszt√°sa
        selectDropdownValue(field.id, field.value);
        
        // K√∂vetkez≈ë leg√∂rd√ºl≈ë men√º kit√∂lt√©se k√©sleltet√©ssel
        safeSetTimeout(() => {
            fillDropdowns(index + 1, callback);
        }, 800); // Hosszabb k√©sleltet√©s a leg√∂rd√ºl≈ë men√ºkn√©l
    }

    // Sz√∂veges beviteli mez≈ë kit√∂lt√©se
    function fillTextInput(inputId, hiddenInputId, value) {
        if (shouldStop || !isProcessRunning) {
            endProcess();
            return false;
        }
        
        try {
            const inputElement = document.getElementById(inputId);
            if (!inputElement) {
                updateStatus(`Beviteli mez≈ë nem tal√°lhat√≥: ${inputId}`, true);
                return false;
            }
            
            // F√≥kusz a mez≈ëre
            inputElement.focus();
            
            // √ârt√©k be√°ll√≠t√°sa
            inputElement.value = value;
            
            // Esem√©nyek kiv√°lt√°sa
            triggerEvent(inputElement, 'input');
            triggerEvent(inputElement, 'change');
            triggerEvent(inputElement, 'blur');
            
            // Rejtett input be√°ll√≠t√°sa, ha l√©tezik
            if (hiddenInputId) {
                const hiddenInput = document.getElementById(hiddenInputId);
                if (hiddenInput) {
                    hiddenInput.value = value;
                }
            }
            
            return true;
        } catch (error) {
            updateStatus(`Hiba a beviteli mez≈ë kit√∂lt√©se k√∂zben (${inputId}): ${error.message}`, true);
            return false;
        }
    }

    // Leg√∂rd√ºl≈ë men√º kiv√°laszt√°sa
    function selectDropdownValue(selectId, value) {
        if (shouldStop || !isProcessRunning) {
            endProcess();
            return false;
        }
        
        try {
            // Leg√∂rd√ºl≈ë men√º megnyit√°sa - haszn√°ljuk a _input_input ID-t
            const selectElement = document.getElementById(selectId);
            if (!selectElement) {
                updateStatus(`Leg√∂rd√ºl≈ë men√º nem tal√°lhat√≥: ${selectId}`, true);
                return false;
            }
            
            updateStatus(`Leg√∂rd√ºl≈ë men√º kiv√°laszt√°sa: ${value} (${selectId})`);
            
            // Kattint√°s a leg√∂rd√ºl≈ë men√ºre
            selectElement.click();
            
            // V√°runk egy kicsit, hogy megjelenjen a leg√∂rd√ºl≈ë lista
            safeSetTimeout(() => {
                if (shouldStop || !isProcessRunning) {
                    endProcess();
                    return;
                }
                
                try {
                    // Keress√ºk meg a megfelel≈ë elemet a list√°ban
                    const items = document.querySelectorAll(`li[data-label="${value}"]`);
                    if (items.length > 0) {
                        // Kattint√°s az elemre
                        items[0].click();
                        
                        // Ellen≈ërizz√ºk, hogy a c√≠mke friss√ºlt-e
                        safeSetTimeout(() => {
                            if (shouldStop || !isProcessRunning) {
                                endProcess();
                                return;
                            }
                            
                            // A label ID most a _input_input v√©gz≈ëd√©s≈± ID-b≈ël _input_label lesz
                            const labelId = selectId.replace('_input_input', '_input_label');
                            const label = document.getElementById(labelId);
                            if (label && label.textContent.trim() !== value) {
                                updateStatus(`A leg√∂rd√ºl≈ë men√º c√≠mk√©je nem friss√ºlt. K√∂zvetlen be√°ll√≠t√°s...`, true);
                                
                                // K√∂zvetlen be√°ll√≠t√°s
                                if (label) {
                                    label.textContent = value;
                                }
                                
                                // A select elem maga
                                if (selectElement) {
                                    selectElement.value = value;
                                    triggerEvent(selectElement, 'change');
                                }
                            }
                        }, 200);
                        
                        return true;
                    } else {
                        updateStatus(`Nem tal√°lhat√≥ elem a leg√∂rd√ºl≈ë men√ºben: ${value}`, true);
                        
                        // K√∂zvetlen be√°ll√≠t√°s
                        if (selectElement) {
                            selectElement.value = value;
                            triggerEvent(selectElement, 'change');
                        }
                        
                        const labelId = selectId.replace('_input_input', '_input_label');
                        const label = document.getElementById(labelId);
                        if (label) {
                            label.textContent = value;
                        }
                        
                        return false;
                    }
                } catch (innerError) {
                    updateStatus(`Hiba a leg√∂rd√ºl≈ë men√º elem kiv√°laszt√°sa k√∂zben: ${innerError.message}`, true);
                    return false;
                }
            }, 300);
        } catch (error) {
            updateStatus(`Hiba a leg√∂rd√ºl≈ë men√º kezel√©se k√∂zben (${selectId}): ${error.message}`, true);
            return false;
        }
    }

    // Esem√©nyek kiv√°lt√°sa
    function triggerEvent(element, eventType) {
        const event = new Event(eventType, { bubbles: true, cancelable: true });
        element.dispatchEvent(event);
    }

    // Minden mez≈ë ellen≈ërz√©se
    function verifyAllFields(callback) {
        if (shouldStop || !isProcessRunning) {
            endProcess();
            return;
        }
        
        let allFieldsCorrect = true;
        let statusMessage = '<strong>Ellen≈ërz√©s eredm√©nye:</strong><br>';
        
        // Sz√∂veges mez≈ëk ellen≈ërz√©se
        for (const field of FIELDS_CONFIG.textInputs) {
            const element = document.getElementById(field.id);
            if (!element) {
                statusMessage += `‚ùå ${field.label} mez≈ë nem tal√°lhat√≥<br>`;
                allFieldsCorrect = false;
                continue;
            }
            
            if (element.value !== field.value) {
                statusMessage += `‚ùå ${field.label} mez≈ë √©rt√©ke nem megfelel≈ë (${element.value} helyett ${field.value})<br>`;
                
                // √öjra megpr√≥b√°ljuk kit√∂lteni
                fillTextInput(field.id, field.hiddenId, field.value);
                
                allFieldsCorrect = false;
            } else {
                statusMessage += `‚úÖ ${field.label}: ${field.value}<br>`;
            }
        }
        
        // Leg√∂rd√ºl≈ë men√ºk ellen≈ërz√©se
        for (const field of FIELDS_CONFIG.dropdowns) {
            // A label ID a _input_input v√©gz≈ëd√©s≈± ID-b≈ël _input_label lesz
            const labelId = field.id.replace('_input_input', '_input_label');
            const labelElement = document.getElementById(labelId);
            if (!labelElement) {
                statusMessage += `‚ùå ${field.label} c√≠mke nem tal√°lhat√≥ (${labelId})<br>`;
                allFieldsCorrect = false;
                continue;
            }
            
            if (labelElement.textContent.trim() !== field.value) {
                statusMessage += `‚ùå ${field.label} √©rt√©ke nem megfelel≈ë (${labelElement.textContent.trim()} helyett ${field.value})<br>`;
                allFieldsCorrect = false;
            } else {
                statusMessage += `‚úÖ ${field.label}: ${field.value}<br>`;
            }
        }
        
        if (allFieldsCorrect) {
            statusMessage += '<strong>Minden mez≈ë sikeresen kit√∂ltve! ‚úÖ</strong><br>';
            updateStatus(statusMessage);
            if (callback) callback();
        } else {
            statusMessage += '<strong>Nem minden mez≈ë lett megfelel≈ëen kit√∂ltve. √öjrapr√≥b√°lkoz√°s...</strong>';
            updateStatus(statusMessage, true);
            
            // √öjra megpr√≥b√°ljuk a kit√∂lt√©st
            safeSetTimeout(() => {
                if (shouldStop || !isProcessRunning) {
                    endProcess();
                    return;
                }
                
                fillTextInputs(0, () => {
                    fillDropdowns(0, () => {
                        verifyAllFields(callback);
                    });
                });
            }, 1000);
        }
    }

    // Kattint√°s a ment√©s gombra
    function clickSaveButton(callback) {
        if (shouldStop || !isProcessRunning) {
            endProcess();
            return;
        }
        
        const saveButton = document.getElementById(FIELDS_CONFIG.buttons.save);
        if (!saveButton) {
            updateStatus('Ment√©s gomb nem tal√°lhat√≥!', true);
            if (callback) callback();
            return;
        }
        
        updateStatus('Kattint√°s a ment√©s gombra...');
        saveButton.click();
        
        // V√°runk a "T√ºrelmet k√©r√ºnk" popup elt≈±n√©s√©re
        waitForLoadingPopupToDisappear(callback);
    }
    
    // V√°rakoz√°s a "T√ºrelmet k√©r√ºnk" popup elt≈±n√©s√©re
    function waitForLoadingPopupToDisappear(callback, maxWaitTime = 30000, checkInterval = 500) {
        if (shouldStop || !isProcessRunning) {
            endProcess();
            return;
        }
        
        updateStatus('V√°rakoz√°s a "T√ºrelmet k√©r√ºnk" popup elt≈±n√©s√©re...');
        
        let waitStartTime = Date.now();
        let checkCount = 0;
        
        function checkForLoadingPopup() {
            if (shouldStop || !isProcessRunning) {
                endProcess();
                return;
            }
            
            checkCount++;
            const elapsedTime = Date.now() - waitStartTime;
            
            // Ellen≈ërizz√ºk, hogy l√©tezik-e a "T√ºrelmet k√©r√ºnk" popup
            const loadingPopups = Array.from(document.querySelectorAll(`.${FIELDS_CONFIG.loadingPopup.className}`))
                .filter(el => el.textContent.includes(FIELDS_CONFIG.loadingPopup.textContent));
            
            if (loadingPopups.length === 0) {
                // Ha nincs popup, akkor folytathatjuk
                updateStatus(`"T√ºrelmet k√©r√ºnk" popup elt≈±nt (${elapsedTime}ms ut√°n, ${checkCount} ellen≈ërz√©s ut√°n).`);
                
                // V√°runk m√©g egy kicsit, hogy biztosan befejez≈ëdj√∂n a ment√©s
                safeSetTimeout(() => {
                    if (callback) callback();
                }, 1000);
            } else if (elapsedTime > maxWaitTime) {
                // Ha t√∫l sok√°ig v√°rtunk, akkor folytatjuk
                updateStatus(`V√°rakoz√°si id≈ë t√∫ll√©pve (${maxWaitTime}ms). Folytat√°s...`, true);
                
                if (callback) callback();
            } else {
                // M√©g mindig l√°that√≥ a popup, v√°runk m√©g
                updateStatus(`V√°rakoz√°s a "T√ºrelmet k√©r√ºnk" popup elt≈±n√©s√©re... (${elapsedTime}ms, ${checkCount} ellen≈ërz√©s)`);
                
                safeSetTimeout(checkForLoadingPopup, checkInterval);
            }
        }
        
        // Ind√≠tjuk az ellen≈ërz√©st
        safeSetTimeout(checkForLoadingPopup, 1000); // V√°runk egy kicsit, hogy megjelenjen a popup
    }
    
    // Kattint√°s az √∫j felvitel gombra
    function clickNewEntryButton(callback) {
        if (shouldStop || !isProcessRunning) {
            endProcess();
            return;
        }
        
        const newEntryButton = document.getElementById(FIELDS_CONFIG.buttons.newEntry);
        if (!newEntryButton) {
            updateStatus('√öj felvitel gomb nem tal√°lhat√≥!', true);
            if (callback) callback();
            return;
        }
        
        updateStatus('Kattint√°s az √∫j felvitel gombra...');
        newEntryButton.click();
        
        // V√°runk az √∫j felvitel bet√∂lt√©s√©re
        safeSetTimeout(() => {
            if (callback) callback();
        }, 1000);
    }

    // St√°tusz friss√≠t√©se
    function updateStatus(message, isError = false) {
        statusPanel.style.display = 'block';
        statusPanel.style.backgroundColor = isError ? '#ffebee' : '#f1f8e9';
        statusPanel.style.borderColor = isError ? '#ffcdd2' : '#dcedc8';
        statusPanel.innerHTML = message;
        console.log(message.replace(/<br>/g, '\n').replace(/<[^>]*>/g, ''));
    }

    // El√©rhet≈ë esem√©nyt√≠pusok lek√©r√©se
    function getAvailableEventTypes() {
        try {
            // Pr√≥b√°ljuk meg megtal√°lni az esem√©nyt√≠pus select elemet t√∂bbf√©le m√≥don
            let selectElement = document.getElementById(FIELDS_CONFIG.eventTypeSelectInputId);
            
            // Ha nem tal√°lhat√≥, pr√≥b√°ljuk meg alternat√≠v m√≥dszerekkel
            if (!selectElement) {
                console.log('Pr√≥b√°lkoz√°s alternat√≠v ID-vel...');
                selectElement = document.getElementById(FIELDS_CONFIG.eventTypeSelectId);
            }
            
            if (!selectElement) {
                console.log('Pr√≥b√°lkoz√°s CSS szelektorral...');
                selectElement = document.querySelector('select[id*="asyncEventTypeHivatkozasiNev"]');
            }
            
            if (!selectElement) {
                console.log('Keres√©s minden select elemben...');
                const allSelects = document.querySelectorAll('select');
                console.log(`Tal√°lt select elemek sz√°ma: ${allSelects.length}`);
                
                for (let i = 0; i < allSelects.length; i++) {
                    const select = allSelects[i];
                    console.log(`Select ${i}: ID="${select.id}", options=${select.options.length}`);
                    if (select.id.includes('asyncEventType') || select.id.includes('EventType')) {
                        selectElement = select;
                        console.log(`Tal√°lt megfelel≈ë select elem: ${select.id}`);
                        break;
                    }
                }
            }
            
            if (!selectElement) {
                console.log('Nem tal√°lhat√≥ esem√©nyt√≠pus select elem');
                return [];
            }
            
            console.log(`Haszn√°lt select elem ID: ${selectElement.id}`);
            console.log(`Options sz√°ma: ${selectElement.options.length}`);
            
            const options = Array.from(selectElement.options);
            const eventTypes = options
                .filter(option => {
                    const hasValue = option.value && option.value !== '&nbsp;' && option.value !== '';
                    const hasText = option.text && option.text.trim() !== '' && option.text.trim() !== '&nbsp;';
                    return hasValue || hasText;
                })
                .map(option => option.value || option.text);
            
            console.log(`Tal√°lt esem√©nyt√≠pusok:`, eventTypes);
            return eventTypes;
        } catch (error) {
            console.error('Hiba az esem√©nyt√≠pusok lek√©r√©se k√∂zben:', error);
            return [];
        }
    }

    // M√°r felvett esem√©nyt√≠pusok lek√©r√©se a t√°bl√°zatb√≥l
    function getExistingEventTypes() {
        try {
            const rows = document.querySelectorAll('tr[data-ri]');
            const existingTypes = [];
            
            console.log(`Tal√°lt t√°bl√°zat sorok sz√°ma: ${rows.length}`);
            
            rows.forEach((row, index) => {
                // A harmadik cella tartalmazza az esem√©nyt√≠pust
                const cells = row.querySelectorAll('td');
                console.log(`Sor ${index + 1}: cell√°k sz√°ma = ${cells.length}`);
                
                if (cells.length >= 3) {
                    const eventType = cells[2].textContent.trim();
                    console.log(`Sor ${index + 1}, 3. cella tartalma: "${eventType}"`);
                    if (eventType) {
                        existingTypes.push(eventType);
                    }
                }
            });
            
            console.log('M√°r felvett esem√©nyt√≠pusok:', existingTypes);
            return existingTypes;
        } catch (error) {
            console.error('Hiba a megl√©v≈ë esem√©nyt√≠pusok lek√©r√©se k√∂zben:', error);
            return [];
        }
    }

    // Mut√°ci√≥s megfigyel≈ë a DOM v√°ltoz√°sainak k√∂vet√©s√©re
    function setupMutationObserver() {
        // Figyelj√ºk a sz√∂veges mez≈ëk √©rt√©keinek v√°ltoz√°s√°t
        for (const field of FIELDS_CONFIG.textInputs) {
            const inputElement = document.getElementById(field.id);
            if (inputElement) {
                inputElement.addEventListener('change', function(e) {
                    // Ha a mez≈ë √©rt√©ke megv√°ltozik √©s √ºres lesz, azonnal t√∂lts√ºk ki √∫jra
                    if (this.value === '' && isProcessRunning && !shouldStop) {
                        console.log(`${field.label} mez≈ë √©rt√©ke t√∂rl≈ëd√∂tt, √∫jrat√∂lt√©s...`);
                        safeSetTimeout(() => {
                            fillTextInput(field.id, field.hiddenId, field.value);
                        }, 100);
                    }
                });
            }
        }
        
        // √Åltal√°nos DOM megfigyel≈ë
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                // Ha a DOM-ban v√°ltoz√°s t√∂rt√©nt, ellen≈ërizz√ºk a mez≈ëket
                if (mutation.type === 'childList' || mutation.type === 'attributes') {
                    // Csak akkor ellen≈ërizz√ºk, ha a folyamat fut
                    if (isProcessRunning && !shouldStop) {
                        // Ellen≈ërizz√ºk a sz√∂veges mez≈ëket
                        for (const field of FIELDS_CONFIG.textInputs) {
                            const inputElement = document.getElementById(field.id);
                            if (inputElement && inputElement.value === '') {
                                console.log(`${field.label} mez≈ë √©rt√©ke t√∂rl≈ëd√∂tt a DOM v√°ltoz√°s ut√°n, √∫jrat√∂lt√©s...`);
                                fillTextInput(field.id, field.hiddenId, field.value);
                            }
                        }
                    }
                }
            });
        });
        
        // Figyelj√ºk a teljes dokumentumot
        observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['value']
        });
    }
    
    // V√°rjunk, am√≠g a DOM teljesen bet√∂lt≈ëdik, majd √°ll√≠tsuk be a megfigyel≈ët
    setTimeout(setupMutationObserver, 1000);
})();
