// ==UserScript==
// @name         Redmine Auto Refresh and Notifications with Change Tracking
// @namespace    http://tampermonkey.net/
// @version      1.8
// @description  Automatic refresh and notifications for Redmine with change tracking
// @author       M3NT1
// @match        https://projekt.nak.hu/projects/*/issues*
// @exclude      https://projekt.nak.hu/issues/*
// @grant        none
// ==/UserScript==


(function() {
    'use strict';

    // Beállítások és állapot kezelése
    const Settings = {
        storageKey: 'redmineAutoRefreshSettings',
        notificationsKey: 'redmineNotifications',
        previousStateKey: 'redminePreviousState',
        processingKey: 'redmineProcessingState', // Új kulcs a feldolgozási állapot követésére

        // Alapértelmezett beállítások
        defaults: {
            refreshInterval: 0,
            lastRefreshTime: null,
            notifications: []
        },

        // Feldolgozási állapot kezelése
        setProcessing(isProcessing) {
            localStorage.setItem(this.processingKey, isProcessing);
        },

        isProcessing() {
            return localStorage.getItem(this.processingKey) === 'true';
        },

        // Cleanup művelet
        cleanup() {
            // Előző állapot törlése
            localStorage.removeItem(this.previousStateKey);
            // Feldolgozási állapot törlése
            localStorage.removeItem(this.processingKey);

            // Értesítések tisztítása (csak az utolsó 50 megtartása)
            const notifications = this.getNotifications();
            if (notifications.length > 50) {
                this.saveNotifications(notifications.slice(0, 50));
            }

            // Változások tisztítása (csak az utolsó 50 változás megtartása)
            const changes = ChangeTracker.getStoredChanges();
            if (changes.changedFields.length > 50) {
                changes.changedFields = changes.changedFields.slice(0, 50);
                ChangeTracker.storeChanges(changes);
            }
        },

        // Beállítások betöltése
        load() {
            const stored = localStorage.getItem(this.storageKey);
            return stored ? JSON.parse(stored) : this.defaults;
        },

        // Beállítások mentése
        save(settings) {
            localStorage.setItem(this.storageKey, JSON.stringify(settings));
        },

        // Előző állapot mentése
        savePreviousState(state) {
            localStorage.setItem(this.previousStateKey, JSON.stringify(state));
        },

        // Előző állapot betöltése
        loadPreviousState() {
            const stored = localStorage.getItem(this.previousStateKey);
            return stored ? JSON.parse(stored) : null;
        },

        // Értesítések mentése
        saveNotification(notification) {
            const notifications = this.getNotifications();
            notifications.unshift({
                id: Date.now() + Math.random(),
                message: notification.message,
                type: notification.type,
                timestamp: new Date().getTime()
            });

            this.saveNotifications(notifications.slice(0, 50)); // Csak az utolsó 50 értesítés megtartása
        },

        // Értesítések közvetlen mentése
        saveNotifications(notifications) {
            localStorage.setItem(this.notificationsKey, JSON.stringify(notifications));
        },

        // Értesítések betöltése
        getNotifications() {
            const stored = localStorage.getItem(this.notificationsKey);
            return stored ? JSON.parse(stored) : [];
        },

        // Összes értesítés törlése
        clearAllNotifications() {
            localStorage.setItem(this.notificationsKey, JSON.stringify([]));
        },

        // Egy értesítés törlése
        deleteNotification(notificationId) {
            const notifications = this.getNotifications();
            const filteredNotifications = notifications.filter(n => n.id !== notificationId);
            this.saveNotifications(filteredNotifications);
        }
    };
    // Változások követése
    const ChangeTracker = {
        storageKey: 'redmineChangeTracker',
        isEnabled: false,
        activeElements: new Set(), // Az aktív DOM elemek nyilvántartása

        init() {
            this.isEnabled = localStorage.getItem('changeTrackerEnabled') === 'true';
            this.createControls();
            if (this.isEnabled) {
                this.applyStoredChanges();
                // Csak akkor ellenőrizzük a változásokat, ha nincs folyamatban feldolgozás
                if (!Settings.isProcessing()) {
                    this.checkForChangesAfterReload();
                }
            }
        },

        cleanup() {
            // Aktív DOM elemek eltávolítása
            this.activeElements.forEach(element => {
                if (element && element.parentNode) {
                    element.parentNode.removeChild(element);
                }
            });
            this.activeElements.clear();
        },

        // DOM elem hozzáadása nyilvántartáshoz
        addElement(element) {
            this.activeElements.add(element);
        },

        // Változások ellenőrzése oldal újratöltés után
        checkForChangesAfterReload() {
            const previousState = Settings.loadPreviousState();
            if (previousState) {
                Settings.setProcessing(true);
                const currentState = this.getCurrentState();
                this.compareStates(previousState, currentState);
                // Előző állapot és feldolgozási jelző törlése
                Settings.cleanup();
            }
        },

        // Aktuális állapot lekérése
        getCurrentState() {
            const fieldsToTrack = {
                tracker: 'Típus',
                status: 'Státusz',
                subject: 'Tárgy',
                priority: 'Prioritás',
                cf_283: 'Hiba osztály [E-közig]',
                assigned_to: 'Felelős',
                cf_296: 'Szállítói jegy [EKK]'
            };

            return Array.from(document.querySelectorAll('tr.issue')).map(row => {
                const data = {
                    id: row.getAttribute('id').replace('issue-', '')
                };

                Object.keys(fieldsToTrack).forEach(field => {
                    const cell = row.querySelector(`td.${field}`);
                    if (cell) {
                        const link = cell.querySelector('a');
                        if (link) {
                            data[field] = {
                                text: cell.textContent.trim(),
                                href: link.href,
                                fullContent: cell.innerHTML.trim()
                            };
                        } else {
                            data[field] = cell.textContent.trim();
                        }
                    }
                });

                return data;
            });
        },

        createControls() {
            const controls = document.createElement('div');
            controls.className = 'change-marker-controls';
            controls.innerHTML = `
                <label>
                    <input type="checkbox" id="change-tracker-toggle" ${this.isEnabled ? 'checked' : ''}>
                    Változások követése
                </label>
                <button id="show-changes" class="btn btn-primary" style="margin-left: 10px;">Változások mutatása</button>
                <button id="clear-all-changes" class="btn btn-danger" style="margin-left: 10px;">Minden jelölés törlése</button>
            `;
            document.body.appendChild(controls);
            this.addElement(controls);

            document.getElementById('change-tracker-toggle').addEventListener('change', (e) => {
                this.isEnabled = e.target.checked;
                localStorage.setItem('changeTrackerEnabled', this.isEnabled);
                if (this.isEnabled) {
                    this.applyStoredChanges();
                    Settings.savePreviousState(this.getCurrentState());
                } else {
                    this.removeAllMarkers();
                }
            });

            document.getElementById('show-changes').addEventListener('click', () => this.showChangesPopup());
            document.getElementById('clear-all-changes').addEventListener('click', () => {
                if (confirm('Biztosan törölni szeretnéd az összes változás jelölést?')) {
                    this.clearAllChanges();
                }
            });
        },

        // Állapotok összehasonlítása
        compareStates(previousState, currentState) {
            const fieldsToTrack = {
                tracker: 'Típus',
                status: 'Státusz',
                subject: 'Tárgy',
                priority: 'Prioritás',
                cf_283: 'Hiba osztály [E-közig]',
                assigned_to: 'Felelős',
                cf_296: 'Szállítói jegy [EKK]'
            };

            // Változások keresése
            previousState.forEach(prevIssue => {
                const currentIssue = currentState.find(curr => curr.id === prevIssue.id);
                if (currentIssue) {
                    Object.keys(fieldsToTrack).forEach(field => {
                        const prevValue = prevIssue[field];
                        const currValue = currentIssue[field];

                        let hasChanged = false;
                        if (typeof prevValue === 'object' && prevValue !== null) {
                            hasChanged = prevValue.fullContent !== currValue.fullContent;
                        } else {
                            hasChanged = prevValue !== currValue;
                        }

                        if (hasChanged) {
                            const oldValueText = typeof prevValue === 'object' ? prevValue.text : prevValue;
                            const newValueText = typeof currValue === 'object' ? currValue.text : currValue;

                            showNotification(
                                `${fieldsToTrack[field]} változás: #${prevIssue.id} - ${oldValueText} → ${newValueText}`,
                                'warning'
                            );
                            this.markChangedField(prevIssue.id, field, oldValueText, newValueText);
                        }
                    });
                }
            });

            // Új issue-k keresése
            const prevIds = previousState.map(issue => issue.id);
            const currIds = currentState.map(issue => issue.id);
            const addedIssues = currIds.filter(id => !prevIds.includes(id));

            if (addedIssues.length > 0) {
                showNotification(`${addedIssues.length} új feladat érkezett`, 'success');
                addedIssues.forEach(id => this.markNewIssue(id));
            }
        },
        getStoredChanges() {
            const stored = localStorage.getItem(this.storageKey);
            return stored ? JSON.parse(stored) : { newIssues: [], changedFields: [] };
        },

        storeChanges(changes) {
            localStorage.setItem(this.storageKey, JSON.stringify(changes));
        },

        markNewIssue(issueId) {
            if (!this.isEnabled) return;

            const changes = this.getStoredChanges();
            if (!changes.newIssues.includes(issueId)) {
                changes.newIssues.push(issueId);
                this.storeChanges(changes);
                this.applyStoredChanges();
            }
        },

        markChangedField(issueId, fieldName, oldValue, newValue) {
            if (!this.isEnabled) return;

            const changes = this.getStoredChanges();
            changes.changedFields.push({
                issueId,
                fieldName,
                oldValue,
                newValue,
                timestamp: new Date().getTime()
            });
            this.storeChanges(changes);
            this.applyStoredChanges();
        },

        applyStoredChanges() {
            if (!this.isEnabled) return;

            const changes = this.getStoredChanges();

            // Új issue-k jelölése
            changes.newIssues.forEach(issueId => {
                const row = document.querySelector(`tr#issue-${issueId}`);
                if (row) {
                    row.classList.add('new-issue');
                }
            });

            // Változott mezők jelölése
            changes.changedFields.forEach(change => {
                const row = document.querySelector(`tr#issue-${change.issueId}`);
                if (row) {
                    const cell = row.querySelector(`td.${change.fieldName}`);
                    if (cell) {
                        cell.classList.add('changed-field');
                    }
                }
            });
        },

        removeAllMarkers() {
            document.querySelectorAll('.new-issue').forEach(el => el.classList.remove('new-issue'));
            document.querySelectorAll('.changed-field').forEach(el => el.classList.remove('changed-field'));
        },

        clearAllChanges() {
            this.storeChanges({ newIssues: [], changedFields: [] });
            this.removeAllMarkers();
            Settings.savePreviousState(this.getCurrentState());
            showNotification('Minden változás jelölés törölve', 'success', false);
        },

        removeChange(type, id) {
            const changes = this.getStoredChanges();
            if (type === 'issue') {
                changes.newIssues = changes.newIssues.filter(i => i !== id);
            } else if (type === 'field') {
                changes.changedFields = changes.changedFields.filter(c => c.timestamp !== id);
            }
            this.storeChanges(changes);
            this.removeAllMarkers();
            this.applyStoredChanges();
            showNotification('Változás jelölés törölve', 'success', false);
        },

showChangesPopup() {
    const changes = this.getStoredChanges();

    const overlay = document.createElement('div');
    overlay.className = 'change-popup-overlay';

    const popup = document.createElement('div');
    popup.className = 'change-popup';

    let content = '<h3>Változások</h3>';

    if (changes.newIssues.length === 0 && changes.changedFields.length === 0) {
        content += '<p>Nincs mentett változás.</p>';
    } else {
        if (changes.newIssues.length > 0) {
            content += '<h4>Új feladatok</h4>';
            changes.newIssues.forEach(issueId => {
                content += `
                    <div class="change-item">
                        <span>Feladat #${issueId}</span>
                        <span class="delete-btn" data-type="issue" data-id="${issueId}">×</span>
                    </div>
                `;
            });
        }

        if (changes.changedFields.length > 0) {
            content += '<h4>Változott mezők</h4>';

            // Változások csoportosítása feladatok szerint
            const groupedChanges = changes.changedFields.reduce((acc, change) => {
                if (!acc[change.issueId]) {
                    acc[change.issueId] = [];
                }
                acc[change.issueId].push(change);
                return acc;
            }, {});

            // Csoportosított változások megjelenítése
            Object.entries(groupedChanges).forEach(([issueId, issueChanges]) => {
                content += `<div class="change-item">`;
                content += `<div class="issue-changes">`;
                content += `<div class="issue-id">Feladat #${issueId}</div>`;
                content += `<div class="changes-list">`;

                issueChanges.forEach(change => {
                    content += `
                        <div class="change-detail">
                            <span>${change.fieldName}: ${change.oldValue} → ${change.newValue}</span>
                            <span class="delete-btn" data-type="field" data-id="${change.timestamp}">×</span>
                        </div>
                    `;
                });

                content += `</div></div></div>`;
            });
        }
    }

    content += '<button class="btn btn-primary" onclick="this.closest(\'.change-popup-overlay\').remove()">Bezárás</button>';

    popup.innerHTML = content;
    overlay.appendChild(popup);
    document.body.appendChild(overlay);
    this.addElement(overlay);

    // CSS stílusok hozzáadása a csoportosított megjelenítéshez
    const style = document.createElement('style');
    style.textContent = `
        .issue-changes {
            border: 1px solid #eee;
            margin: 10px 0;
            padding: 10px;
            border-radius: 5px;
        }
        .issue-id {
            font-weight: bold;
            margin-bottom: 5px;
            color: #007bff;
        }
        .changes-list {
            margin-left: 20px;
        }
        .change-detail {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 3px 0;
            border-bottom: 1px dashed #eee;
        }
        .change-detail:last-child {
            border-bottom: none;
        }
    `;
    document.head.appendChild(style);

    popup.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const type = e.target.dataset.type;
            const id = type === 'issue' ? e.target.dataset.id : parseFloat(e.target.dataset.id);
            this.removeChange(type, id);

            // Ha ez az utolsó változás az adott feladathoz, távolítsuk el az egész blokkot
            if (type === 'field') {
                const changeDetail = e.target.closest('.change-detail');
                const changesList = changeDetail.parentElement;
                const issueChanges = changeDetail.closest('.issue-changes');

                changeDetail.remove();

                if (changesList.children.length === 0) {
                    issueChanges.remove();
                }
            } else {
                e.target.closest('.change-item').remove();
            }

            if (popup.querySelectorAll('.change-item').length === 0) {
                overlay.remove();
            }
        });
    });
}

    };
    // Stílusok hozzáadása
    const style = document.createElement('style');
    style.textContent = `
        .notification-panel {
            position: fixed;
            top: 20px;
            right: 20px;
            max-width: 300px;
            z-index: 9999;
        }
        .notification {
            background: #fff;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            animation: slideIn 0.5s ease-out;
        }
        .notification.success { border-left: 4px solid #28a745; }
        .notification.warning { border-left: 4px solid #ffc107; }
        .notification.error { border-left: 4px solid #dc3545; }

        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        .auto-refresh-controls {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: #fff;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            max-width: 400px;
            z-index: 1000;
        }

        .change-marker-controls {
            position: fixed;
            bottom: 20px;
            left: 430px;
            background: #fff;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            z-index: 1000;
        }

        .notification-history {
            max-height: 300px;
            overflow-y: auto;
            margin-top: 10px;
            font-size: 12px;
        }

        .notification-history-item {
            padding: 5px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .new-issue {
            font-weight: bold !important;
            color: #dc3545 !important;
        }

        .changed-field {
            font-weight: bold !important;
            color: #ffc107 !important;
        }

        .change-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            z-index: 1001;
            max-width: 80%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .change-popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .change-item {
            padding: 5px;
            margin: 5px 0;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .change-item .delete-btn {
            cursor: pointer;
            color: #dc3545;
            padding: 2px 6px;
            border-radius: 3px;
            font-weight: bold;
        }

        .btn {
            padding: 5px 10px;
            border-radius: 3px;
            border: none;
            cursor: pointer;
            font-size: 12px;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }
    `;
    document.head.appendChild(style);

    let refreshInterval;

    // Értesítési panel létrehozása
    function createNotificationPanel() {
        const panel = document.createElement('div');
        panel.className = 'notification-panel';
        document.body.appendChild(panel);
        ChangeTracker.addElement(panel);
        return panel;
    }

    // Automatikus frissítés vezérlő létrehozása
    function createRefreshControls() {
        const controls = document.createElement('div');
        controls.className = 'auto-refresh-controls';

        const settings = Settings.load();

        controls.innerHTML = `
            <label>
                Auto frissítés:
                <select id="refresh-interval">
                    <option value="0" ${settings.refreshInterval === 0 ? 'selected' : ''}>Ki</option>
                    <option value="30" ${settings.refreshInterval === 30 ? 'selected' : ''}>30 mp</option>
                    <option value="60" ${settings.refreshInterval === 60 ? 'selected' : ''}>1 perc</option>
                    <option value="300" ${settings.refreshInterval === 300 ? 'selected' : ''}>5 perc</option>
                </select>
            </label>
            <div id="last-refresh">Utolsó frissítés: ${settings.lastRefreshTime ? new Date(settings.lastRefreshTime).toLocaleTimeString() : 'soha'}</div>
            <div class="notification-controls">
                <button id="show-notifications" class="btn btn-primary">Értesítések mutatása</button>
                <button id="clear-all-notifications" class="btn btn-danger">Összes értesítés törlése</button>
            </div>
            <div class="notification-history" style="display: none;"></div>
        `;

        document.body.appendChild(controls);
        ChangeTracker.addElement(controls);

        document.getElementById('refresh-interval').addEventListener('change', (e) => {
            const interval = parseInt(e.target.value);
            if (interval > 0) {
                startAutoRefresh(interval);
            } else {
                stopAutoRefresh();
            }

            const settings = Settings.load();
            settings.refreshInterval = interval;
            Settings.save(settings);
        });

        document.getElementById('show-notifications').addEventListener('click', toggleNotificationHistory);

        document.getElementById('clear-all-notifications').addEventListener('click', () => {
            if (confirm('Biztosan törölni szeretnéd az összes értesítést?')) {
                Settings.clearAllNotifications();
                updateNotificationHistory();
                showNotification('Összes értesítés törölve', 'success', false);
            }
        });

        if (settings.refreshInterval > 0) {
            startAutoRefresh(settings.refreshInterval);
        }
    }

    // Értesítések előzmények megjelenítése/elrejtése
    function toggleNotificationHistory() {
        const historyDiv = document.querySelector('.notification-history');
        const showNotificationsBtn = document.getElementById('show-notifications');
        if (historyDiv.style.display === 'none') {
            historyDiv.style.display = 'block';
            showNotificationsBtn.textContent = 'Értesítések elrejtése';
            updateNotificationHistory();
        } else {
            historyDiv.style.display = 'none';
            showNotificationsBtn.textContent = 'Értesítések mutatása';
        }
    }

    // Értesítések előzmények frissítése
    function updateNotificationHistory() {
        const historyDiv = document.querySelector('.notification-history');
        const notifications = Settings.getNotifications();

        historyDiv.innerHTML = notifications.map(notification => `
            <div class="notification-history-item ${notification.type}">
                <span>${new Date(notification.timestamp).toLocaleString()} - ${notification.message}</span>
                <span class="delete-btn" data-id="${notification.id}">×</span>
            </div>
        `).join('');

        historyDiv.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const notificationId = parseFloat(e.target.dataset.id);
                Settings.deleteNotification(notificationId);
                updateNotificationHistory();
                showNotification('Értesítés törölve', 'success', false);
            });
        });
    }

    // Értesítés megjelenítése
    function showNotification(message, type = 'success', store = true) {
        const panel = document.querySelector('.notification-panel') || createNotificationPanel();

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        panel.appendChild(notification);

        if (store) {
            Settings.saveNotification({ message, type });
            updateNotificationHistory();
        }

        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 500);
        }, 5000);
    }

    // Automatikus frissítés indítása
    function startAutoRefresh(seconds) {
        stopAutoRefresh();
        refreshInterval = setInterval(() => {
            // Csak akkor frissítünk, ha nincs folyamatban feldolgozás
            if (!Settings.isProcessing()) {
                checkForUpdates();
            }
        }, seconds * 1000);
        updateLastRefreshTime();
    }

    // Automatikus frissítés leállítása
    function stopAutoRefresh() {
        if (refreshInterval) {
            clearInterval(refreshInterval);
            refreshInterval = null;
        }
    }

    // Frissítési idő frissítése
    function updateLastRefreshTime() {
        const currentTime = new Date().getTime();
        const lastRefreshElement = document.getElementById('last-refresh');
        if (lastRefreshElement) {
            lastRefreshElement.textContent = `Utolsó frissítés: ${new Date(currentTime).toLocaleTimeString()}`;
        }

        const settings = Settings.load();
        settings.lastRefreshTime = currentTime;
        Settings.save(settings);
    }

    // Változások ellenőrzése és oldal újratöltése
    function checkForUpdates() {
        if (ChangeTracker.isEnabled) {
            Settings.savePreviousState(ChangeTracker.getCurrentState());
        }
        // Cleanup a régi DOM elemek eltávolításához
        ChangeTracker.cleanup();
        window.location.reload(true);
    }

    // Szkript inicializálása
    function initializeScript() {
        if (document.querySelector('.auto-refresh-controls')) {
            return;
        }

        createRefreshControls();
        ChangeTracker.init();

        if (!localStorage.getItem('initialNotificationShown')) {
            showNotification('Automatikus frissítés aktív', 'success', false);
            localStorage.setItem('initialNotificationShown', 'true');
        }

        const settings = Settings.load();
        if (settings.refreshInterval > 0) {
            startAutoRefresh(settings.refreshInterval);
        }
    }

    // Szkript indítása
    initializeScript();

})();
