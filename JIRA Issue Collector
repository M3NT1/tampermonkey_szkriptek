// ==UserScript==
// @name         JIRA Issue Collector
// @namespace    http://tampermonkey.net/
// @version      2.9
// @description  Collect JIRA issues data with grouping by assignee from all pages - With pagination support
// @author       M3NT1
// @match        https://jira.ulyssys.hu/issues/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // DOM változásfigyelő létrehozása
    const observer = new MutationObserver((mutations, obs) => {
        const scriptRunnerBtn = document.querySelector('#sr-jql-query-builder');
        if (scriptRunnerBtn) {
            obs.disconnect(); // Leállítjuk a figyelést ha megtaláltuk a gombot
            initializeCollectButton(scriptRunnerBtn);
        }
    });

    // DOM figyelés indítása
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    function initializeCollectButton(scriptRunnerBtn) {
        const collectButton = document.createElement('button');
        collectButton.className = 'aui-button aui-button-subtle';
        collectButton.style.marginLeft = '5px';
        collectButton.style.backgroundColor = '#18989c';
        collectButton.style.color = 'white';
        collectButton.style.borderColor = '#18989c';

        collectButton.addEventListener('mouseover', function() {
            this.style.backgroundColor = '#147579';
            this.style.borderColor = '#147579';
        });
        collectButton.addEventListener('mouseout', function() {
            this.style.backgroundColor = '#18989c';
            this.style.borderColor = '#18989c';
        });

        collectButton.textContent = 'Collect All Issues';
        collectButton.setAttribute('resolved', '');

        scriptRunnerBtn.parentNode.insertBefore(collectButton, scriptRunnerBtn.nextSibling);

        function showError(message, isTemporary = true) {
            const errorDiv = document.createElement('div');
            errorDiv.style.position = 'fixed';
            errorDiv.style.top = '50%';
            errorDiv.style.left = '50%';
            errorDiv.style.transform = 'translate(-50%, -50%)';
            errorDiv.style.padding = '20px';
            errorDiv.style.background = '#ffebee';
            errorDiv.style.border = '1px solid #ef5350';
            errorDiv.style.borderRadius = '5px';
            errorDiv.style.zIndex = '10000';
            errorDiv.style.color = '#c62828';
            errorDiv.style.fontWeight = 'bold';
            errorDiv.style.maxWidth = '80%';
            errorDiv.style.whiteSpace = 'pre-wrap';
            errorDiv.textContent = message;

            if (isTemporary) {
                setTimeout(() => {
                    if (document.body.contains(errorDiv)) {
                        document.body.removeChild(errorDiv);
                    }
                }, 5000);
            } else {
                const closeButton = document.createElement('button');
                closeButton.textContent = '×';
                closeButton.style.position = 'absolute';
                closeButton.style.right = '10px';
                closeButton.style.top = '10px';
                closeButton.style.border = 'none';
                closeButton.style.background = 'none';
                closeButton.style.fontSize = '20px';
                closeButton.style.cursor = 'pointer';
                closeButton.style.color = '#c62828';
                closeButton.onclick = () => document.body.removeChild(errorDiv);
                errorDiv.appendChild(closeButton);
            }

            document.body.appendChild(errorDiv);
            return errorDiv;
        }

        async function fetchWithRetry(url, retries = 3, delay = 1000) {
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, {
                        headers: {
                            'Cache-Control': 'no-cache',
                            'Pragma': 'no-cache'
                        },
                        credentials: 'include'
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response;
                } catch (error) {
                    console.error(`Attempt ${i + 1} failed:`, error);
                    if (i === retries - 1) throw error;
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }

        function checkRequiredColumns() {
            const headers = Array.from(document.querySelectorAll('th'));
            const requiredColumns = {
                'issuekey': false,
                'summary': false,
                'assignee': false
            };

            const missingColumns = [];

            headers.forEach(header => {
                const columnId = header.getAttribute('data-id') || '';
                const columnText = header.textContent.trim().toLowerCase();

                if (columnId.includes('issuekey') || columnText === 'key') {
                    requiredColumns.issuekey = true;
                }
                if (columnId.includes('summary') || columnText === 'summary') {
                    requiredColumns.summary = true;
                }
                if (columnId.includes('assignee') || columnText === 'assignee') {
                    requiredColumns.assignee = true;
                }
            });

            if (!requiredColumns.issuekey) missingColumns.push('Key');
            if (!requiredColumns.summary) missingColumns.push('Summary');
            if (!requiredColumns.assignee) missingColumns.push('Assignee');

            return missingColumns;
        }

        async function getAllIssues() {
            try {
                const missingColumns = checkRequiredColumns();
                if (missingColumns.length > 0) {
                    const errorMessage = 'Hiányzó kötelező oszlop(ok):\n' +
                                      missingColumns.join(', ') + '\n\n' +
                                      'Kérlek add hozzá ezeket az oszlopokat a nézethez a "Columns" gombra kattintva!';
                    showError(errorMessage, false);
                    return;
                }

                const baseUrl = window.location.origin;
                const issuesByAssignee = {};
                const processedIssueKeys = new Set();
                let progressDiv = null;

                const jqlInput = document.querySelector('#jql').value;
                const totalResults = parseInt(document.querySelector('.results-count-total').textContent);
                const batchSize = 50;

                progressDiv = document.createElement('div');
                progressDiv.style.position = 'fixed';
                progressDiv.style.top = '50%';
                progressDiv.style.left = '50%';
                progressDiv.style.transform = 'translate(-50%, -50%)';
                progressDiv.style.padding = '20px';
                progressDiv.style.background = 'white';
                progressDiv.style.border = '1px solid #ccc';
                progressDiv.style.borderRadius = '5px';
                progressDiv.style.zIndex = '10000';
                document.body.appendChild(progressDiv);

                const getPageUrl = (startAt) => {
                    const currentUrl = new URL(window.location.href);
                    const params = new URLSearchParams(currentUrl.search);
                    params.set('startIndex', startAt.toString());
                    return `${baseUrl}/issues/?${params.toString()}`;
                };

                for(let startAt = 0; startAt < totalResults; startAt += batchSize) {
                    progressDiv.textContent = `Collecting issues ${startAt + 1} to ${Math.min(startAt + batchSize, totalResults)} of ${totalResults}...`;

                    const url = getPageUrl(startAt);
                    console.log(`Processing page ${Math.floor(startAt / batchSize) + 1} of ${Math.ceil(totalResults / batchSize)}`);

                    try {
                        const response = await fetchWithRetry(url);
                        const text = await response.text();
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(text, 'text/html');

                        const rows = doc.querySelectorAll('tr.issuerow');
                        console.log(`Found ${rows.length} rows on current page`);

                        if (rows.length === 0) {
                            console.warn(`No rows found for startAt=${startAt}`);
                            continue;
                        }

                        rows.forEach(row => {
                            const keyElement = row.querySelector('td.issuekey a:last-child');
                            if (!keyElement) {
                                console.warn('No key element found in row');
                                return;
                            }

                            const key = keyElement.textContent.trim();
                            const keyUrl = keyElement.href;

                            if (!key) {
                                console.warn('Empty key found');
                                return;
                            }

                            if (processedIssueKeys.has(key)) {
                                console.log(`Skipping duplicate issue: ${key}`);
                                return;
                            }
                            processedIssueKeys.add(key);

                            const summaryCell = row.querySelector('td.summary');
                            const assigneeCell = row.querySelector('td.assignee');

                            if (!summaryCell || !assigneeCell) {
                                console.warn(`Missing required cells for issue ${key}`);
                                return;
                            }

                            const summaryLinks = summaryCell.querySelectorAll('a.issue-link');
                            let summary = '';

                            if (summaryLinks.length > 0) {
                                summary = summaryLinks[summaryLinks.length - 1].textContent.trim();
                            } else {
                                summary = summaryCell.textContent.trim();
                            }

                            let assignee = 'Unassigned';
                            const assigneeLink = assigneeCell.querySelector('a');
                            if (assigneeLink) {
                                assignee = assigneeLink.textContent.trim();
                                const inactiveText = assigneeCell.textContent.trim();
                                if (inactiveText.includes('[X]') || inactiveText.includes('(Inactive)')) {
                                    assignee += ' [X] (Inactive)';
                                }
                            }

                            if (!issuesByAssignee[assignee]) {
                                issuesByAssignee[assignee] = [];
                            }

                            issuesByAssignee[assignee].push({
                                key,
                                summary,
                                url: keyUrl
                            });
                        });

                        await new Promise(resolve => setTimeout(resolve, 1000));

                    } catch (error) {
                        console.error(`Error processing page ${startAt / batchSize + 1}:`, error);
                        throw error;
                    }
                }

                if (progressDiv) {
                    document.body.removeChild(progressDiv);
                }

                console.log(`Total unique issues collected: ${processedIssueKeys.size}`);

                const sortedAssignees = Object.keys(issuesByAssignee).sort();
                const htmlContent = new Array();
                htmlContent.push('<div style="font-family: -apple-system,BlinkMacSystemFont,\'Segoe UI\',Roboto,Oxygen,Ubuntu,\'Fira Sans\',\'Droid Sans\',\'Helvetica Neue\',sans-serif; font-size: 14px;">');

                sortedAssignees.forEach(assignee => {
                    htmlContent.push(`<p style="margin: 20px 0 10px 0; font-size: 16px;"><strong style="font-weight: 600;">${assignee}:</strong></p>`);

                    issuesByAssignee[assignee].sort((a, b) => a.key.localeCompare(b.key));

                    htmlContent.push('<ul style="list-style-type: none; margin: 0; padding: 0;">');

                    issuesByAssignee[assignee].forEach(issue => {
                        htmlContent.push(
                            `<li style="margin: 5px 0; line-height: 1.5;">` +
                            `<a href="${issue.url}" style="color: #0052CC; text-decoration: none; font-weight: 500;">${issue.key}</a> - ${issue.summary}` +
                            `</li>`
                        );
                    });

                    htmlContent.push('</ul>');
                });

                htmlContent.push('</div>');
                const finalHtml = htmlContent.join('\n');

                try {
                    await navigator.clipboard.write([
                        new ClipboardItem({
                            'text/html': new Blob([finalHtml], {type: 'text/html'}),
                            'text/plain': new Blob([finalHtml.replace(/<[^>]+>/g, '')], {type: 'text/plain'})
                        })
                    ]);
                    collectButton.textContent = 'Copied!';
                } catch (clipboardError) {
                    console.error('Clipboard error:', clipboardError);
                    const textarea = document.createElement('textarea');
                    textarea.value = finalHtml.replace(/<[^>]+>/g, '');
                    document.body.appendChild(textarea);
                    textarea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textarea);
                    collectButton.textContent = 'Copied (plain text)!';
                }

                setTimeout(() => {
                    collectButton.textContent = 'Collect All Issues';
                }, 2000);

            } catch (error) {
                console.error('Error collecting issues:', error);
                if (progressDiv && document.body.contains(progressDiv)) {
                    document.body.removeChild(progressDiv);
                }
                collectButton.textContent = 'Error!';
                setTimeout(() => {
                    collectButton.textContent = 'Collect All Issues';
                }, 2000);
                showError(`Error collecting issues: ${error.message}`, false);
            }
        }

        collectButton.addEventListener('click', getAllIssues);
    }
})();
