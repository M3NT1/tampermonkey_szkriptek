// ==UserScript==
// @name         Redmine Row Highlighter
// @namespace    http://tampermonkey.net/
// @version      0.8
// @description  Add yellow border to empty "Szállítói jegy [EKK]" cells except "Nem hiba" status
// @match        https://projekt.nak.hu/projects/*/issues*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Stílusok hozzáadása
    const warningStyle = document.createElement('style');
    warningStyle.textContent = `
        td.cf_296.warning-cell {
            border: 2px solid #FFD700 !important;
            border-radius: 2px !important;
        }
    `;
    document.head.appendChild(warningStyle);

    function highlightCells() {
        const table = document.querySelector('table.list.issues');
        if (!table) return;

        const rows = table.querySelectorAll('tr.issue');
        const headers = Array.from(table.querySelectorAll('th'));

        const supplierTicketColumnIndex = headers.findIndex(th => th.textContent.trim() === 'Szállítói jegy [EKK]');
        const statusColumnIndex = headers.findIndex(th => th.textContent.trim() === 'Státusz');

        if (supplierTicketColumnIndex === -1 || statusColumnIndex === -1) return;

        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            if (cells.length > Math.max(supplierTicketColumnIndex, statusColumnIndex)) {
                const supplierTicketCell = cells[supplierTicketColumnIndex];
                const statusCell = cells[statusColumnIndex];

                if (supplierTicketCell.textContent.trim() === '' &&
                    statusCell.textContent.trim() !== 'Nem hiba') {
                    supplierTicketCell.classList.add('warning-cell');
                } else {
                    supplierTicketCell.classList.remove('warning-cell');
                }
            }
        });
    }

    // Első futtatás késleltetéssel
    setTimeout(highlightCells, 1000);

    // MutationObserver beállítása
    const observer = new MutationObserver((mutations) => {
        let shouldUpdate = false;
        for (const mutation of mutations) {
            if (mutation.type === 'childList' ||
                (mutation.type === 'attributes' && mutation.target.classList.contains('issue'))) {
                shouldUpdate = true;
                break;
            }
        }
        if (shouldUpdate) {
            setTimeout(highlightCells, 100);
        }
    });

    // A táblázat megfigyelése
    setTimeout(() => {
        const issuesTable = document.querySelector('table.list.issues');
        if (issuesTable) {
            observer.observe(issuesTable, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['class']
            });
        }
    }, 1500);

})();
