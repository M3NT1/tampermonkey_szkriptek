// ==UserScript==
// @name         TER Munkaidő Összesítő
// @namespace    http://tampermonkey.net/
// @version      1.6
// @description  Munkaidő összesítő szkript a TER rendszerhez
// @author       M3NT1
// @match        https://ter.ulyssys.hu/ter/wt/wtown*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';
    console.log('TER Munkaidő Összesítő szkript betöltése...');

    // Konstansok definiálása
    const SELECTORS = {
        PROJECT_ROWS: 'tr[data-ri]',
        PROJECT_INPUT: 'input[class*="ui-autocomplete-input"]:not([id*="areaComp"])',
        AREA_INPUT: 'input[class*="ui-autocomplete-input"][id*="areaComp"]',
        ACTIVITY_INPUT: 'input[class*="ui-autocomplete-input"]:not([id*="areaComp"])',
        TIME_INPUT: 'input[style*="text-align: center"]'
    };

    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;

    // Projekt limitek kezelése
    let projectLimits = JSON.parse(localStorage.getItem('projectLimits') || '{}');
    let knownProjects = [];
    let projectSummary = {};
    let totalHours = 0;
    let allProjectData = [];

    // Drag függvények
    function dragStart(e) {
        initialX = e.clientX - xOffset;
        initialY = e.clientY - yOffset;

        if (e.target.classList.contains('floating-button')) {
            isDragging = true;
        }
    }

    function dragEnd(e) {
        initialX = currentX;
        initialY = currentY;
        isDragging = false;
    }

    function drag(e) {
        if (isDragging) {
            e.preventDefault();
            currentX = e.clientX - initialX;
            currentY = e.clientY - initialY;
            xOffset = currentX;
            yOffset = currentY;

            const floatingButton = document.querySelector('.floating-button');
            floatingButton.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;

            const dateSelector = document.querySelector('.date-selector');
            if (dateSelector.style.display !== 'none') {
                const buttonRect = floatingButton.getBoundingClientRect();
                dateSelector.style.left = `${buttonRect.left}px`;
                dateSelector.style.top = `${buttonRect.bottom + 10}px`;
            }
        }
    }

    // Stílusok hozzáadása
    console.log('Stílusok hozzáadása...');
    const style = document.createElement('style');
    style.textContent = `
        .floating-button {
            position: fixed;
            cursor: move;
            background-color: #4CAF50;
            color: white;
            padding: 10px;
            border-radius: 5px;
            z-index: 10000;
            user-select: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        .date-selector {
            position: fixed;
            background: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            z-index: 10000;
            display: none;
            min-width: 250px;
        }
        .date-selector input {
            margin: 5px;
            padding: 5px;
        }
        .date-selector button {
            margin: 5px;
            padding: 5px 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }
        .date-selector button:hover {
            background-color: #45a049;
        }
        .summary-window {
            position: fixed;
            background: white;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            max-width: 500px;
            z-index: 9999;
            right: 20px;
            top: 20px;
        }
        .summary-header {
            cursor: move;
            padding: 5px;
            margin: -15px -15px 10px -15px;
            background: #4CAF50;
            color: white;
            border-radius: 5px 5px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .summary-content {
            display: block;
            transition: all 0.3s ease;
        }
        .summary-content.collapsed {
            display: none;
        }
        .toggle-button {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 20px;
            padding: 0 5px;
        }
        .toggle-button:hover {
            opacity: 0.8;
        }
        .project-row {
            border-bottom: 1px solid #eee;
            font-weight: bold;
            background-color: #fff;
        }
        .subproject-row {
            border-bottom: 1px solid #eee;
            background-color: #f8f8f8;
            font-weight: bold;
        }
        .area-row {
            border-bottom: 1px solid #eee;
            background-color: #f5f5f5;
            font-weight: bold;
        }
        .activity-row {
            border-bottom: 1px solid #eee;
            background-color: #f9f9f9;
            font-size: 0.9em;
        }
        .activity-cell {
            padding: 5px;
            padding-left: 40px;
        }
        .hours-cell {
            padding: 5px;
            text-align: right;
        }
        .percent-cell {
            padding: 5px;
            text-align: right;
        }
        .limit-exceeded {
            background-color: #ffebee;
        }
        .loading-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            z-index: 10001;
        }
    `;
    document.head.appendChild(style);

    // UI elemek létrehozása
    function createUI() {
        // Lebegő gomb létrehozása
        const floatingButton = document.createElement('div');
        floatingButton.className = 'floating-button';
        floatingButton.innerHTML = 'Munkaidő Összesítő';
        floatingButton.style.left = '20px';
        floatingButton.style.top = '20px';

        // Dátumválasztó panel létrehozása
        const dateSelector = document.createElement('div');
        dateSelector.className = 'date-selector';
        dateSelector.innerHTML = `
            <div>Kezdő dátum: <input type="date" id="startDate"></div>
            <div>Vég dátum: <input type="date" id="endDate"></div>
            <button id="calculateButton">Számítás</button>
        `;
        dateSelector.style.left = '20px';
        dateSelector.style.top = '70px';

        document.body.appendChild(floatingButton);
        document.body.appendChild(dateSelector);

        return { floatingButton, dateSelector };
    }

    // Segédfüggvények
    function formatDate(date) {
        const d = new Date(date);
        const year = d.getFullYear();
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${year}.${month}.${day}`;
    }

    function convertTimeToHours(timeStr) {
        if (!timeStr || timeStr === '-') return 0;
        const [hours, minutes] = timeStr.split(':').map(Number);
        return hours + (minutes / 60);
    }

    // Projekt adatok feldolgozása
    function processProjectData() {
        try {
            console.log('Projekt adatok feldolgozása kezdődik...');
            const projectRows = document.querySelectorAll(SELECTORS.PROJECT_ROWS);
            console.log(`Talált projekt sorok száma: ${projectRows.length}`);

            let dayData = {
                nakProjects: {
                    hours: 0,
                    percentage: 0,
                    projects: {},
                    isNakMainProject: true
                },
                otherProjects: {},
                totalHours: 0
            };

            projectRows.forEach((row, index) => {
                try {
                    const inputs = row.querySelectorAll('input[type="text"]');
                    const projectInput = Array.from(inputs).find(input => 
                        input.className.includes('ui-autocomplete-input') && 
                        !input.id.includes('areaComp')
                    );
                    
                    if (!projectInput) return;

                    const projectName = projectInput.value;
                    const areaInput = row.querySelector(SELECTORS.AREA_INPUT);
                    const area = areaInput && !areaInput.disabled ? areaInput.value : '';
                    
                    const activityInput = Array.from(inputs).find(input => 
                        input.className.includes('ui-autocomplete-input') && 
                        !input.id.includes('areaComp') &&
                        input !== projectInput
                    );
                    const activity = activityInput ? activityInput.value : '';

                    const timeInput = row.querySelector(SELECTORS.TIME_INPUT);
                    if (!timeInput) return;

                    const timeStr = timeInput.value;
                    const hours = convertTimeToHours(timeStr);

                    if (!projectName || !hours) return;

                    dayData.totalHours += hours;

                    if (projectName.startsWith('NAK')) {
                        processNakProject(dayData, projectName, area, activity, hours);
                    } else {
                        processOtherProject(dayData, projectName, activity, hours);
                    }

                } catch (rowError) {
                    console.error(`Hiba a ${index}. sor feldolgozása közben:`, rowError);
                }
            });

            allProjectData.push(dayData);
            console.log('Napi adatok feldolgozva:', dayData);

        } catch (error) {
            console.error('Hiba a projekt adatok feldolgozása közben:', error);
            throw error;
        }
    }

    function processNakProject(dayData, projectName, area, activity, hours) {
        if (!dayData.nakProjects.projects[projectName]) {
            dayData.nakProjects.projects[projectName] = {
                hours: 0,
                percentage: 0,
                areas: {},
                activities: {},
                hasAreas: false
            };
        }

        const projectData = dayData.nakProjects.projects[projectName];

        if (area) {
            processNakProjectArea(projectData, area, activity, hours);
        } else if (activity) {
            processNakProjectActivity(projectData, activity, hours);
        }

        projectData.hours += hours;
        dayData.nakProjects.hours += hours;
    }

    function processNakProjectArea(projectData, area, activity, hours) {
        projectData.hasAreas = true;
        if (!projectData.areas[area]) {
            projectData.areas[area] = {
                hours: 0,
                percentage: 0,
                activities: {}
            };
        }

        if (activity) {
            if (!projectData.areas[area].activities[activity]) {
                projectData.areas[area].activities[activity] = {
                    hours: 0,
                    percentage: 0
                };
            }
            projectData.areas[area].activities[activity].hours += hours;
        }
        projectData.areas[area].hours += hours;
    }

    function processNakProjectActivity(projectData, activity, hours) {
        if (!projectData.activities[activity]) {
            projectData.activities[activity] = {
                hours: 0,
                percentage: 0
            };
        }
        projectData.activities[activity].hours += hours;
    }

    function processOtherProject(dayData, projectName, activity, hours) {
        if (!dayData.otherProjects[projectName]) {
            dayData.otherProjects[projectName] = {
                hours: 0,
                percentage: 0,
                activities: {},
                hasAreas: false
            };
        }

        const projectData = dayData.otherProjects[projectName];

        if (activity) {
            if (!projectData.activities[activity]) {
                projectData.activities[activity] = {
                    hours: 0,
                    percentage: 0
                };
            }
            projectData.activities[activity].hours += hours;
        }

        projectData.hours += hours;
    }

    // Összes adat feldolgozása
    function processAllData() {
        projectSummary = {
            NAK: {
                hours: 0,
                percentage: 0,
                projects: {},
                isNakMainProject: true
            }
        };
        totalHours = 0;

        allProjectData.forEach(dayData => {
            totalHours += dayData.totalHours;

            // NAK projektek feldolgozása
            Object.entries(dayData.nakProjects.projects).forEach(([projectName, project]) => {
                if (!projectSummary.NAK.projects[projectName]) {
                    projectSummary.NAK.projects[projectName] = {
                        hours: 0,
                        percentage: 0,
                        areas: {},
                        activities: {},
                        hasAreas: false
                    };
                }

                const summaryProject = projectSummary.NAK.projects[projectName];
                summaryProject.hours += project.hours;
                projectSummary.NAK.hours += project.hours;
                summaryProject.hasAreas = summaryProject.hasAreas || project.hasAreas;

                // Területek összesítése
                Object.entries(project.areas).forEach(([area, areaData]) => {
                    if (!summaryProject.areas[area]) {
                        summaryProject.areas[area] = {
                            hours: 0,
                            percentage: 0,
                            activities: {}
                        };
                    }
                    summaryProject.areas[area].hours += areaData.hours;

                    // Terület tevékenységeinek összesítése
                    Object.entries(areaData.activities).forEach(([activity, activityData]) => {
                        if (!summaryProject.areas[area].activities[activity]) {
                            summaryProject.areas[area].activities[activity] = {
                                hours: 0,
                                percentage: 0
                            };
                        }
                        summaryProject.areas[area].activities[activity].hours += activityData.hours;
                    });
                });

                // Tevékenységek összesítése
                Object.entries(project.activities).forEach(([activity, activityData]) => {
                    if (!summaryProject.activities[activity]) {
                        summaryProject.activities[activity] = {
                            hours: 0,
                            percentage: 0
                        };
                    }
                    summaryProject.activities[activity].hours += activityData.hours;
                });
            });

            // Egyéb projektek feldolgozása
            Object.entries(dayData.otherProjects).forEach(([projectName, project]) => {
                if (!projectSummary[projectName]) {
                    projectSummary[projectName] = {
                        hours: 0,
                        percentage: 0,
                        activities: {},
                        hasAreas: false
                    };
                }

                const summaryProject = projectSummary[projectName];
                summaryProject.hours += project.hours;

                // Tevékenységek összesítése
                Object.entries(project.activities).forEach(([activity, activityData]) => {
                    if (!summaryProject.activities[activity]) {
                        summaryProject.activities[activity] = {
                            hours: 0,
                            percentage: 0
                        };
                    }
                    summaryProject.activities[activity].hours += activityData.hours;
                });
            });
        });

        calculatePercentages();
    }

    function calculatePercentages() {
        Object.values(projectSummary).forEach(project => {
            project.percentage = (project.hours / totalHours) * 100;

            if (project.isNakMainProject) {
                Object.values(project.projects).forEach(nakProject => {
                    nakProject.percentage = (nakProject.hours / project.hours) * 100;

                    Object.values(nakProject.areas).forEach(area => {
                        area.percentage = (area.hours / nakProject.hours) * 100;
                        Object.values(area.activities).forEach(activity => {
                            activity.percentage = (activity.hours / area.hours) * 100;
                        });
                    });

                    Object.values(nakProject.activities).forEach(activity => {
                        activity.percentage = (activity.hours / nakProject.hours) * 100;
                    });
                });
            } else {
                Object.values(project.activities).forEach(activity => {
                    activity.percentage = (activity.hours / project.hours) * 100;
                });
            }
        });
    }

    // Eredmények megjelenítése
    function displayResults() {
        if (totalHours === 0) {
            alert('Nincs feldolgozható adat a kiválasztott időszakban!');
            return;
        }

        const resultHTML = generateResultHTML();
        const oldResults = document.getElementById('projectSummaryResults');
        if (oldResults) {
            oldResults.remove();
        }

        const resultDiv = document.createElement('div');
        resultDiv.innerHTML = resultHTML;
        document.body.appendChild(resultDiv);

        setupResultsEventListeners();
    }

    function generateResultHTML() {
        let html = `
            <div id="projectSummaryResults" class="summary-window">
                <div class="summary-header">
                    <span>Projekt Összesítés</span>
                    <button class="toggle-button">−</button>
                </div>
                <div class="summary-content">
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr style="background: #f5f5f5;">
                            <th style="padding: 5px; text-align: left;">Projekt / Terület / Tevékenység</th>
                            <th style="padding: 5px; text-align: right;">Órák</th>
                            <th style="padding: 5px; text-align: right;">%</th>
                        </tr>
        `;

        Object.entries(projectSummary).sort().forEach(([projectName, project]) => {
            const limitClass = project.limitExceeded ? 'limit-exceeded' : '';

            if (project.isNakMainProject) {
                html += generateNakProjectHTML(project, limitClass);
            } else {
                html += generateOtherProjectHTML(projectName, project, limitClass);
            }
        });

        html += `
                        <tr style="border-top: 2px solid #ccc; font-weight: bold;">
                            <td style="padding: 5px;">Összesen</td>
                            <td class="hours-cell">${totalHours.toFixed(2)}</td>
                            <td class="percent-cell">100%</td>
                        </tr>
                    </table>
                </div>
            </div>
        `;

        return html;
    }

    function generateNakProjectHTML(project, limitClass) {
        let html = `
            <tr class="project-row ${limitClass}">
                <td style="padding: 5px;">NAK${projectLimits['NAK'] ? ` (Limit: ${projectLimits['NAK']}%)` : ''}</td>
                <td class="hours-cell">${project.hours.toFixed(2)}</td>
                <td class="percent-cell">${project.percentage.toFixed(1)}%</td>
            </tr>
        `;

        Object.entries(project.projects).sort().forEach(([nakProjectName, nakProject]) => {
            const nakLimitClass = nakProject.limitExceeded ? 'limit-exceeded' : '';
            html += generateNakSubProjectHTML(nakProjectName, nakProject, nakLimitClass);
        });

        return html;
    }

    function generateNakSubProjectHTML(projectName, project, limitClass) {
        let html = `
            <tr class="subproject-row ${limitClass}">
                <td style="padding: 5px; padding-left: 20px;">└ ${projectName}${projectLimits[projectName] ? ` (Limit: ${projectLimits[projectName]}%)` : ''}</td>
                <td class="hours-cell">${project.hours.toFixed(2)}</td>
                <td class="percent-cell">${project.percentage.toFixed(1)}%</td>
            </tr>
        `;

        if (project.hasAreas) {
            Object.entries(project.areas).sort().forEach(([area, areaData]) => {
                html += generateAreaHTML(area, areaData, limitClass);
            });
        }

        Object.entries(project.activities).sort().forEach(([activity, activityData]) => {
            html += generateActivityHTML(activity, activityData, limitClass);
        });

        return html;
    }

    function generateAreaHTML(area, areaData, limitClass) {
        let html = `
            <tr class="area-row ${limitClass}">
                <td style="padding: 5px; padding-left: 40px;">└ ${area}</td>
                <td class="hours-cell">${areaData.hours.toFixed(2)}</td>
                <td class="percent-cell">${areaData.percentage.toFixed(1)}%</td>
            </tr>
        `;

        Object.entries(areaData.activities).sort().forEach(([activity, activityData]) => {
            html += generateActivityHTML(activity, activityData, limitClass);
        });

        return html;
    }

    function generateActivityHTML(activity, activityData, limitClass) {
        return `
            <tr class="activity-row ${limitClass}">
                <td style="padding: 5px; padding-left: 60px;">└ ${activity}</td>
                <td class="hours-cell">${activityData.hours.toFixed(2)}</td>
                <td class="percent-cell">${activityData.percentage.toFixed(1)}%</td>
            </tr>
        `;
    }

    function generateOtherProjectHTML(projectName, project, limitClass) {
        let html = `
            <tr class="project-row ${limitClass}">
                <td style="padding: 5px;">${projectName}${projectLimits[projectName] ? ` (Limit: ${projectLimits[projectName]}%)` : ''}</td>
                <td class="hours-cell">${project.hours.toFixed(2)}</td>
                <td class="percent-cell">${project.percentage.toFixed(1)}%</td>
            </tr>
        `;

        Object.entries(project.activities).sort().forEach(([activity, activityData]) => {
            html += generateActivityHTML(activity, activityData, limitClass);
        });

        return html;
    }

    // Eseménykezelők beállítása
    function setupEventListeners(floatingButton, dateSelector) {
        floatingButton.addEventListener('mousedown', dragStart);
        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', dragEnd);

        floatingButton.addEventListener('click', function(e) {
            if (!isDragging) {
                dateSelector.style.display = dateSelector.style.display === 'none' ? 'block' : 'none';
                if (dateSelector.style.display === 'block') {
                    const buttonRect = floatingButton.getBoundingClientRect();
                    dateSelector.style.left = `${buttonRect.left}px`;
                    dateSelector.style.top = `${buttonRect.bottom + 10}px`;
                }
            }
        });

        document.getElementById('calculateButton').addEventListener('click', async function() {
            try {
                const startDate = new Date(document.getElementById('startDate').value);
                const endDate = new Date(document.getElementById('endDate').value);

                if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                    alert('Kérlek adj meg érvényes dátumokat!');
                    return;
                }

                showLoadingIndicator();
                allProjectData = [];
                projectSummary = {};
                totalHours = 0;

                for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
                    await processDay(date);
                }

                processAllData();
                displayResults();
                hideLoadingIndicator();

            } catch (error) {
                console.error('Hiba történt:', error);
                alert('Hiba történt az adatok feldolgozása során!');
                hideLoadingIndicator();
            }
        });
    }

    function setupResultsEventListeners() {
        const toggleButton = document.querySelector('.toggle-button');
        const content = document.querySelector('.summary-content');

        if (toggleButton && content) {
            toggleButton.addEventListener('click', () => {
                content.classList.toggle('collapsed');
                toggleButton.textContent = content.classList.contains('collapsed') ? '+' : '−';
            });
        }

        const summaryWindow = document.getElementById('projectSummaryResults');
        if (summaryWindow) {
            makeDraggable(summaryWindow);
        }
    }

    function makeDraggable(element) {
        const header = element.querySelector('.summary-header');
        let isDragging = false;
        let currentX;
        let currentY;
        let initialX;
        let initialY;
        let xOffset = 0;
        let yOffset = 0;

        header.addEventListener('mousedown', startDragging);
        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', stopDragging);

        function startDragging(e) {
            initialX = e.clientX - xOffset;
            initialY = e.clientY - yOffset;
            isDragging = true;
        }

        function stopDragging() {
            initialX = currentX;
            initialY = currentY;
            isDragging = false;
        }

        function drag(e) {
            if (isDragging) {
                e.preventDefault();
                currentX = e.clientX - initialX;
                currentY = e.clientY - initialY;
                xOffset = currentX;
                yOffset = currentY;
                element.style.transform = `translate(${currentX}px, ${currentY}px)`;
            }
        }
    }

    // Segéd UI függvények
    function showLoadingIndicator() {
        const loader = document.createElement('div');
        loader.className = 'loading-indicator';
        loader.innerHTML = 'Adatok feldolgozása...';
        loader.id = 'loadingIndicator';
        document.body.appendChild(loader);
    }

    function hideLoadingIndicator() {
        const loader = document.getElementById('loadingIndicator');
        if (loader) {
            loader.remove();
        }
    }

    // Nap feldolgozása
    async function processDay(date) {
        try {
            const formattedDate = formatDate(date);
            console.log(`Nap feldolgozása: ${formattedDate}`);

            // Kijelölés törlése
            await clearSelection();

            // Nap kiválasztása
            const dayRow = findDayRow(formattedDate);
            if (dayRow) {
                const checkbox = dayRow.querySelector('.ui-chkbox-box');
                if (checkbox) {
                    checkbox.click();
                    await new Promise(resolve => setTimeout(resolve, 3000));
                    processProjectData();
                }
            }

            await new Promise(resolve => setTimeout(resolve, 1000));

        } catch (error) {
            console.error(`Hiba a nap feldolgozása közben (${formatDate(date)}):`, error);
        }
    }

    function findDayRow(date) {
        const rows = document.querySelectorAll('tr[data-ri]');
        return Array.from(rows).find(row => {
            const dateCell = row.querySelector('td:nth-child(2)');
            return dateCell && dateCell.textContent === date;
        });
    }

    async function clearSelection() {
        const selectedCheckbox = document.querySelector('.ui-chkbox-box.ui-state-active');
        if (selectedCheckbox) {
            selectedCheckbox.click();
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    }

    // Inicializálás
    function init() {
        try {
            const { floatingButton, dateSelector } = createUI();
            setupEventListeners(floatingButton, dateSelector);
            console.log('TER Munkaidő Összesítő szkript sikeresen inicializálva.');
        } catch (error) {
            console.error('Hiba történt a szkript inicializálása során:', error);
        }
    }

    // Szkript indítása
    init();
})();
