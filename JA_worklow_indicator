// ==UserScript==
// @name         JIRA Assistant Worklog Indicator with Custom Settings and Total Coloring
// @namespace    http://tampermonkey.net/
// @version      2.9
// @description  Színezi a log indicatort és a total mezőt egyéni beállításokkal és munkarendekkel, tartós tárolással
// @match        https://app.jiraassistant.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    let controlsDiv;
    let minimizeButton;
    let isMinimized = false;
    let settings = loadSettings();

    // Funkció a beállítások betöltésére
    function loadSettings() {
        const savedSettings = localStorage.getItem('jiraAssistantSettings');
        if (savedSettings) {
            return JSON.parse(savedSettings);
        } else {
            return {
                defaultWorkHours: 8,
                defaultGreenThreshold: 90,
                defaultYellowThreshold: 80,
                persons: {}
            };
        }
    }

    // Funkció a beállítások mentésére
    function saveSettings() {
        localStorage.setItem('jiraAssistantSettings', JSON.stringify(settings));
        console.log('Mentett beállítások:', settings);
    }

    // Funkció a személyre szabott beállítások lekérésére
    function getPersonSettings(name) {
        if (typeof settings.persons[name] !== 'object') {
            settings.persons[name] = {};
        }
        const personSettings = settings.persons[name];
        const result = {
            workHours: personSettings.workHours ?? settings.defaultWorkHours,
            greenThreshold: personSettings.greenThreshold ?? settings.defaultGreenThreshold,
            yellowThreshold: personSettings.yellowThreshold ?? settings.defaultYellowThreshold
        };
        console.log(`Beállítások ${name} számára:`, result);
        return result;
    }

    // Funkció a log indicator színezésére
    function colorLogIndicator(cell, name) {
        const logValue = parseFloat(cell.textContent) || 0;
        const indicator = cell.querySelector('.log-indicator .prog-bar');
        const { workHours } = getPersonSettings(name);
        
        if (indicator) {
            const percentage = (logValue / workHours) * 100;
            const color = getColorForPercentage(percentage, name);
            console.log(`${name} napi log: ${logValue}/${workHours} óra, ${percentage}%, szín: ${color}`);
            indicator.style.backgroundColor = color;
        }
    }

    // Funkció a total mező színezésére
    function colorTotalField(row, name) {
        const totalCell = row.querySelector('td[data-test-id="total"]');
        if (!totalCell) return;

        const totalHours = parseFloat(totalCell.textContent) || 0;
        const { workHours } = getPersonSettings(name);
        const workDays = countWorkDays(row);
        const expectedTotalHours = workHours * workDays;
        
        const percentage = (totalHours / expectedTotalHours) * 100;
        const color = getColorForPercentage(percentage, name);
        
        console.log(`${name} total: ${totalHours}/${expectedTotalHours} óra, ${percentage}%, szín: ${color}`);
        totalCell.style.backgroundColor = color;
    }

    // Funkció a százalék alapján történő színmeghatározásra
    function getColorForPercentage(percentage, name) {
        const { greenThreshold, yellowThreshold } = getPersonSettings(name);

        if (percentage >= greenThreshold) {
            return 'green';
        } else if (percentage >= yellowThreshold) {
            return 'yellow';
        } else {
            return 'red';
        }
    }

    // Funkció a munkanapok számolására
    function countWorkDays(row) {
        const cells = row.querySelectorAll('.day-wl-block');
        let workDays = 0;
        cells.forEach(cell => {
            if (!cell.classList.contains('col-holiday') && parseFloat(cell.textContent) > 0) {
                workDays++;
            }
        });
        return workDays;
    }

    // Funkció a panel minimalizálásához és visszaállításához
    function toggleMinimize() {
        const content = controlsDiv.querySelector('.controls-content');
        if (isMinimized) {
            content.style.display = 'block';
            minimizeButton.textContent = '−';
            controlsDiv.style.width = 'auto';
            controlsDiv.style.height = 'auto';
        } else {
            content.style.display = 'none';
            minimizeButton.textContent = '+';
            controlsDiv.style.width = '30px';
            controlsDiv.style.height = '30px';
        }
        isMinimized = !isMinimized;
    }

    // Funkció az egyéni munkaórák beállításához és a frissítő gomb hozzáadásához
    function addControls() {
        if (controlsDiv) {
            document.body.removeChild(controlsDiv);
        }

        controlsDiv = document.createElement('div');
        controlsDiv.style.position = 'fixed';
        controlsDiv.style.top = '10px';
        controlsDiv.style.left = '10px';
        controlsDiv.style.zIndex = '9999';
        controlsDiv.style.backgroundColor = '#f1fbff';
        controlsDiv.style.border = '2px solid #a4b7c1';
        controlsDiv.style.borderRadius = '20px';
        controlsDiv.style.color = '#001';
        controlsDiv.style.padding = '5px 8px 5px 12px';
        controlsDiv.style.maxHeight = '80vh';
        controlsDiv.style.overflowY = 'auto';

        minimizeButton = document.createElement('button');
        minimizeButton.textContent = '−';
        minimizeButton.style.position = 'absolute';
        minimizeButton.style.top = '3px';
        minimizeButton.style.left = '3px';
        minimizeButton.style.width = '20px';
        minimizeButton.style.height = '20px';
        minimizeButton.style.padding = '0';
        minimizeButton.style.background = '#28a745';
        minimizeButton.style.border = '1px solid #28a745';
        minimizeButton.style.color = '#fff';
        minimizeButton.style.borderRadius = '50%';
        minimizeButton.style.fontSize = '16px';
        minimizeButton.style.lineHeight = '1';
        minimizeButton.style.display = 'flex';
        minimizeButton.style.justifyContent = 'center';
        minimizeButton.style.alignItems = 'center';
        minimizeButton.style.cursor = 'pointer';
        minimizeButton.addEventListener('click', toggleMinimize);

        const contentDiv = document.createElement('div');
        contentDiv.classList.add('controls-content');
        contentDiv.style.marginTop = '25px';

        const defaultWorkHoursInput = createInput('Alapértelmezett munkaórák:', 'defaultWorkHours', 8);
        const defaultGreenThresholdInput = createInput('Alapértelmezett zöld küszöb (%):', 'defaultGreenThreshold', 90);
        const defaultYellowThresholdInput = createInput('Alapértelmezett sárga küszöb (%):', 'defaultYellowThreshold', 80);

        const refreshButton = document.createElement('button');
        refreshButton.textContent = 'Frissítés';
        refreshButton.style.marginTop = '10px';
        refreshButton.style.background = '#28a745';
        refreshButton.style.border = '1px solid #28a745';
        refreshButton.style.color = '#fff';
        refreshButton.style.padding = '5px 10px';
        refreshButton.style.borderRadius = '5px';
        refreshButton.style.cursor = 'pointer';
        refreshButton.addEventListener('click', () => {
            collectPersons();
            refreshColors();
        });

        contentDiv.appendChild(defaultWorkHoursInput);
        contentDiv.appendChild(defaultGreenThresholdInput);
        contentDiv.appendChild(defaultYellowThresholdInput);
        contentDiv.appendChild(refreshButton);

        controlsDiv.appendChild(minimizeButton);
        controlsDiv.appendChild(contentDiv);

        document.body.appendChild(controlsDiv);
    }

    // Segédfüggvény input mező létrehozásához
    function createInput(labelText, key, defaultValue) {
        const container = document.createElement('div');
        container.style.marginBottom = '5px';

        const label = document.createElement('label');
        label.textContent = labelText;

        const input = document.createElement('input');
        input.type = 'number';
        input.value = key.includes('.') ? 
            (settings.persons[key.split('.')[1]]?.[key.split('.')[2]] ?? settings[key.split('.')[2]] ?? defaultValue) : 
            (settings[key] ?? defaultValue);
        input.style.marginLeft = '5px';
        input.style.width = '50px';
        input.addEventListener('change', () => updateSettings(key, input.value));

        container.appendChild(label);
        container.appendChild(input);

        return container;
    }

    // Funkció a beállítások frissítésére
    function updateSettings(key, value) {
        console.log(`Beállítás frissítése: ${key} = ${value}`);
        if (key.includes('.')) {
            const [category, name, subKey] = key.split('.');
            if (typeof settings[category][name] !== 'object') {
                settings[category][name] = {};
            }
            settings[category][name][subKey] = parseFloat(value);
        } else {
            settings[key] = parseFloat(value);
        }
        saveSettings();
        refreshColors();
    }

    // Funkció a személyek kigyűjtésére és egyéni beállítások hozzáadására
    function collectPersons() {
        const currentPersons = {};
        const rows = document.querySelectorAll('tr.pointer.auto-wrap[data-row-id="user"]');
        rows.forEach(row => {
            const nameElement = row.querySelector('.user-info-min .name');
            if (nameElement) {
                const name = nameElement.textContent.trim();
                if (typeof settings.persons[name] !== 'object') {
                    settings.persons[name] = {};
                }
                currentPersons[name] = settings.persons[name];
            }
        });

        // Frissítjük a beállításokat az új személyekkel, de megtartjuk a régieket is
        settings.persons = { ...settings.persons, ...currentPersons };
        saveSettings();

        // Eltávolítjuk a régi személyes beállításokat
        const oldPersonInputs = controlsDiv.querySelectorAll('.person-input');
        oldPersonInputs.forEach(input => input.remove());

        // Hozzáadjuk az egyéni beállításokat a vezérlőelemekhez
        Object.keys(currentPersons).forEach(name => {
            const personContainer = document.createElement('div');
            personContainer.classList.add('person-input');
            personContainer.style.marginTop = '10px';
            personContainer.style.borderTop = '1px solid #ccc';
            personContainer.style.paddingTop = '10px';

            const nameLabel = document.createElement('strong');
            nameLabel.textContent = name;
            personContainer.appendChild(nameLabel);

            const workHoursInput = createInput('Munkaórák:', `persons.${name}.workHours`, settings.defaultWorkHours);
            const greenThresholdInput = createInput('Zöld küszöb (%):', `persons.${name}.greenThreshold`, settings.defaultGreenThreshold);
            const yellowThresholdInput = createInput('Sárga küszöb (%):', `persons.${name}.yellowThreshold`, settings.defaultYellowThreshold);

            personContainer.appendChild(workHoursInput);
            personContainer.appendChild(greenThresholdInput);
            personContainer.appendChild(yellowThresholdInput);

            controlsDiv.querySelector('.controls-content').insertBefore(personContainer, controlsDiv.querySelector('.controls-content').lastChild);
        });

        console.log('Kigyűjtött személyek:', Object.keys(currentPersons));
    }

    // Funkció a színek frissítésére
    function refreshColors() {
        console.log('Színek frissítése...');
        const rows = document.querySelectorAll('tr.pointer.auto-wrap[data-row-id="user"]');
        rows.forEach(row => {
            const nameElement = row.querySelector('.user-info-min .name');
            if (nameElement) {
                const name = nameElement.textContent.trim();
                console.log(`Színezés: ${name}`);
                const cells = row.querySelectorAll('.day-wl-block');
                cells.forEach(cell => colorLogIndicator(cell, name));
                colorTotalField(row, name);
            }
        });
    }

    // Fő funkció, amely elindítja a szkriptet
    function init() {
        console.log('Szkript inicializálása...');
        addControls();
        collectPersons();
        refreshColors();
    }

    // Szkript indítása, amikor az oldal betöltődött
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

    // MutationObserver a dinamikus változások figyeléséhez
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                console.log('DOM változás észlelve, színek frissítése...');
                refreshColors();
            }
        });
    });

    observer.observe(document.body, { childList: true, subtree: true });
})();
